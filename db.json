{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/images/java_nio_relation.png","path":"images/java_nio_relation.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1576636805346},{"_id":"themes/next/_config.yml","hash":"98bc3e357981818635d6cc82df7d612e0aaf5907","modified":1585217319990},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1576636805347},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1576636805347},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1576636805352},{"_id":"themes/next/package.json","hash":"61aa2ac422e92ad435d1bfedea8d41824f5fe85e","modified":1576636805374},{"_id":"source/_posts/Java_Nio.md","hash":"5580ecc4cedcb5cfc688131d5c8b12636a92dce9","modified":1577633139512},{"_id":"source/_posts/dig-and-dns-record-type.md","hash":"02f33fae65b53b9a77944812523630e25cb6b71d","modified":1577635996549},{"_id":"source/_posts/dns-data-type-md.md","hash":"733d2bc9d68523e1ba27ed13fe24302a113b1258","modified":1577632244079},{"_id":"source/_posts/first-blog.md","hash":"2ee3354b83c64a46c11d82a61498a5a0ab7e98fc","modified":1576826382487},{"_id":"source/about/index.md","hash":"0cf86dc40700f2ac7bff738ce516aab0909f54f2","modified":1576636805322},{"_id":"source/categories/index.md","hash":"17d073f601f2dbe624d2c1dccd332945109b9f68","modified":1576636805323},{"_id":"source/tags/index.md","hash":"95d24454fda7af4003f689389abb46bb56587ed9","modified":1576636805323},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1576636805348},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1576636805348},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1576636805348},{"_id":"themes/next/docs/DATA-FILES.md","hash":"d0d46cb265f0efceffce82214cd36d8b82ddce13","modified":1576636805348},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1576636805348},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1576636805349},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1576636805349},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1576636805349},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1576636805349},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1576636805352},{"_id":"themes/next/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1576636805352},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1576636805352},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1576636805352},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1576636805352},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1576636805352},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1576636805353},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1576636805353},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1576636805353},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1576636805353},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1576636805353},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1576636805353},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1576636805353},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1576636805354},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1576636805354},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1576636805354},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1576636805354},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1576636805354},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1576636805354},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1576636805354},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1576636805355},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1576636805355},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1576636805372},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1576636805373},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1576636805373},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1576636805373},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1576636805373},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1576636805373},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1576636805378},{"_id":"source/images/java_nio_relation.png","hash":"9d961c178988fd53763e587973d615e7b8382df9","modified":1577633109158},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"2665f6a9d72090f9452a8811544ff2596e8899be","modified":1576636805349},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1576636805350},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1576636805349},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1576636805350},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1576636805350},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1576636805350},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1576636805350},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1576636805351},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"3b4dbf0d2ca12ab442b7e0e227769ce100b8a444","modified":1576636805351},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1576636805351},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1576636805351},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1576636805351},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1576636805351},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1576636805355},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1576636805355},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1576636805355},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1576636805356},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1576636805356},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1576636805357},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1576636805359},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1576636805359},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1576636805359},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1576636805359},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1576636805364},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1576636805365},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1576636805366},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1576636805368},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1576636805370},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1576636805370},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1576636805374},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1576636805376},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1576636805377},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1576636805377},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1576636805377},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1576636805377},{"_id":"themes/next/scripts/helpers/engine.js","hash":"c8c8afde59df587f883dd9b47a3c629042bc4c6e","modified":1576636805378},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1576636805378},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1576636805378},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1576636805379},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1576636805379},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1576636805379},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1576636805379},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1576636805380},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1576636805380},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1576636805380},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1576636805380},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1576636805381},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1576636805381},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1576636805401},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1576636805401},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1576636805401},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1576636805402},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1576636805402},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1576636805402},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1576636805402},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1576636805402},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1576636805403},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1576636805403},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1576636805403},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1576636805403},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1576636805403},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1576636805404},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1576636805404},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1576636805404},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1576636805404},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1576636805404},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1576636805405},{"_id":"themes/next/source/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1576636805405},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1576636805405},{"_id":"themes/next/source/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1576636805406},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1576636805406},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1576636805395},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1576636805395},{"_id":"source/_posts/dig-and-dns-record-type/DNS_Query_Flow.png","hash":"ce4a3d55ec6a4e1c664195d40dccf8f0e24d9d61","modified":1577632729700},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1576636805356},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1576636805356},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1576636805356},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1576636805356},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1576636805357},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1576636805357},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1576636805357},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1576636805357},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1576636805357},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1576636805357},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1576636805358},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1576636805358},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1576636805358},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1576636805358},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1576636805358},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1576636805358},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1576636805359},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"d5a5f45ef0b41332cad069d263df2c449e2f1e7e","modified":1576636805359},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1576636805360},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1576636805360},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1576636805360},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1576636805364},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1576636805365},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1576636805366},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1576636805366},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1576636805366},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1576636805367},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1576636805367},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1576636805367},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1576636805368},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1ef172bc041d6f6b6c8c642ea64496a188d79029","modified":1576636805367},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"0992d51dff4b8f4f4e69834c8cd1604593536c5d","modified":1576636805368},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1576636805368},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1576636805368},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1576636805369},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1576636805369},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1576636805369},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1576636805370},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1576636805370},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1576636805371},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1576636805371},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1576636805371},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1576636805371},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1576636805372},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"4a7207c6f9ab0e56ea8f59aca3ed4c2cb2fb7450","modified":1576636805372},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1576636805372},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1576636805372},{"_id":"themes/next/scripts/events/lib/config.js","hash":"436c5597dc7dae91ed20e3f4134db94d91c84b49","modified":1576636805374},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1576636805374},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1576636805375},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1576636805375},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1576636805375},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1576636805375},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1576636805376},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1576636805375},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1576636805376},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1576636805376},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1576636805376},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1576636805395},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1576636805396},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1576636805396},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1576636805400},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1576636805400},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1576636805400},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1576636805401},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1576636805401},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1576636805405},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1576636805405},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1576636805406},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1576636805406},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1576636805414},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1576636805414},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1576636805382},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1576636805382},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1576636805382},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1576636805386},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1576636805386},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1576636805389},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1576636805389},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1576636805391},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1576636805391},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1576636805391},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1576636805392},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1576636805392},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1576636805392},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1576636805393},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1576636805394},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1576636805396},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1576636805397},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1576636805397},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1576636805397},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1576636805397},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1576636805398},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1576636805398},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1576636805398},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c6905c694c6fbbf372b53456a0d219701010a110","modified":1576636805398},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1576636805398},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1576636805399},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1576636805399},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1576636805399},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1576636805399},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1576636805399},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1576636805400},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1576636805400},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1576636805400},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1576636805407},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1576636805407},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1576636805407},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1576636805413},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1576636805383},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1576636805383},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1576636805383},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1576636805383},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1576636805383},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1576636805383},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1576636805384},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1576636805384},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1576636805384},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1576636805384},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1576636805384},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1576636805384},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1576636805385},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1576636805385},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1576636805385},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1576636805385},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1576636805385},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1576636805386},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1576636805386},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1576636805386},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1576636805387},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1576636805387},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1576636805387},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1576636805387},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1576636805388},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1576636805388},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1576636805388},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1576636805388},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1576636805388},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1576636805389},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1576636805389},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1576636805389},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1576636805389},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1576636805390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1576636805390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1576636805390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1576636805390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1576636805390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1576636805391},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1576636805391},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1576636805391},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1576636805392},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1576636805392},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1576636805392},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1576636805393},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1576636805393},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1576636805393},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1576636805394},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1576636805394},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1576636805394},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1576636805394},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1576636805413},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1576636805412},{"_id":"source/_posts/mono-create.md","hash":"15339a6b2da7f6bd49d5ac35104bef745da91036","modified":1578302660248},{"_id":"public/baidusitemap.xml","hash":"201e56defeb9542264ff4d677e12be3fc79f25d1","modified":1585217436419},{"_id":"public/sitemap.xml","hash":"f59f8bbf08253ae50501bc4ecbfddeb1f4dae4e8","modified":1585217436419},{"_id":"public/search.xml","hash":"cdcdce273839a7740a1ffbfd07d44550f6da547a","modified":1585217436419},{"_id":"public/atom.xml","hash":"b4892fb5bdb6f9a3b85a2d9022e7af3f16239d60","modified":1585217436419},{"_id":"public/about/index.html","hash":"e2cb3b3346ab2bd4a6b4b0b51dde517bd3236a02","modified":1585217436419},{"_id":"public/categories/index.html","hash":"b922832e59444966add8a1af85458955cd4eb78c","modified":1585217436419},{"_id":"public/tags/index.html","hash":"1cc5cf28a918d561ffdd09e2c2f8514f68d97356","modified":1585217436419},{"_id":"public/categories/网络/index.html","hash":"510580906678b65126782cb8dcc2eaeeb25132bb","modified":1585217436419},{"_id":"public/categories/工具/index.html","hash":"d95e368d4b0647a008c58b093388a796e3b9faf2","modified":1585217436419},{"_id":"public/categories/网络/Nio/index.html","hash":"8b0ed45ce6c159d9e9e49fbbba6bff6875fbefa0","modified":1585217436419},{"_id":"public/categories/网络/DNS/index.html","hash":"b29c1115c4ef464d303aba32084ca0a1f1e85b5f","modified":1585217436419},{"_id":"public/categories/工具/文字/index.html","hash":"e95085a6f735ce5ceaa7acd5b1d741492836c878","modified":1585217436419},{"_id":"public/categories/Project-Reactor/index.html","hash":"932c12925b5c86cee1004ef115ce81b1d6049ddf","modified":1585217436419},{"_id":"public/archives/index.html","hash":"30673c52b5832a2f29ea728383c4f5d45e7dcf29","modified":1585217436419},{"_id":"public/archives/2019/index.html","hash":"e2cb3f75030c1d644d1cd2ad33dd45631326f6d6","modified":1585217436419},{"_id":"public/archives/2019/12/index.html","hash":"d1312641a8eeff00f347392d825a1a618b68ac52","modified":1585217436419},{"_id":"public/archives/2020/index.html","hash":"0fa37dac540e60a8ed0762832af158a4521e1fdf","modified":1585217436419},{"_id":"public/archives/2020/01/index.html","hash":"4c58bf332b927dad6d9c92b8ea7ce411aa47c7da","modified":1585217436419},{"_id":"public/2020/01/05/mono-create/index.html","hash":"9235af2ed4f12aaab9a542e4834f94339d2d04e7","modified":1585217436419},{"_id":"public/2019/12/29/dig-and-dns-record-type/index.html","hash":"0fb2f226cb9cd44d42feca2bcd155358d821c696","modified":1585217436419},{"_id":"public/2019/12/29/dns-data-type-md/index.html","hash":"4eab67e9784011905645f64a27a7b8616166910c","modified":1585217436419},{"_id":"public/2019/12/20/Java_Nio/index.html","hash":"88b297926b18192d69222b6054ab01036a692ae3","modified":1585217436419},{"_id":"public/2019/12/17/first-blog/index.html","hash":"17c2284d767234ef39d04a0dd233f806aedcfebc","modified":1585217436419},{"_id":"public/index.html","hash":"4ec682a0a826b7364921c657f94fb092b2641b57","modified":1585217436419},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585217436419},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1585217436419},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585217436419},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585217436419},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585217436419},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585217436419},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585217436419},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585217436419},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585217436419},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585217436419},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585217436419},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585217436419},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585217436419},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1585217436419},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1585217436419},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1585217436419},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1585217436419},{"_id":"public/images/java_nio_relation.png","hash":"9d961c178988fd53763e587973d615e7b8382df9","modified":1585217436419},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1585217436419},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1585217436419},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1585217436419},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1585217436419},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1585217436419},{"_id":"public/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1585217436419},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1585217436419},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1585217436419},{"_id":"public/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1585217436419},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1585217436419},{"_id":"public/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1585217436419},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585217436419},{"_id":"public/css/main.css","hash":"95113378ecddf03d049b65f72b9de1f0fe06a636","modified":1585217436419},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1585217436419},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585217436419},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1585217436419},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1585217436419},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1585217436419},{"_id":"public/2019/12/29/dig-and-dns-record-type/DNS_Query_Flow.png","hash":"ce4a3d55ec6a4e1c664195d40dccf8f0e24d9d61","modified":1585217436419}],"Category":[{"name":"网络","_id":"ck4r6b9rq0003317a7g8q4zlo"},{"name":"工具","_id":"ck4r6b9s10008317a5rzt6u65"},{"name":"Nio","parent":"ck4r6b9rq0003317a7g8q4zlo","_id":"ck4r6b9s10009317a333t252a"},{"name":"DNS","parent":"ck4r6b9rq0003317a7g8q4zlo","_id":"ck4r6b9s2000a317ad1i34ktg"},{"name":"文字","parent":"ck4r6b9s10008317a5rzt6u65","_id":"ck4r6b9s3000e317ahqkw3bq2"},{"name":"Project Reactor","_id":"ck88lj6qa0001yz7agnwcbf2j"}],"Data":[],"Page":[{"title":"about","date":"2019-12-17T10:15:07.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-12-17 18:15:07\n---\n","updated":"2019-12-18T02:40:05.322Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck4r6b9rn0001317a03cgdt9s","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"categories","date":"2019-12-17T10:00:00.000Z","type":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-12-17 18:00:00\ntype: \"categories\"\n---\n\n","updated":"2019-12-18T02:40:05.323Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck4r6b9ss000l317ah2oua8oa","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2019-12-17T10:12:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-12-17 18:12:42\ntype: \"tags\"\n---\n","updated":"2019-12-18T02:40:05.323Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck4r6b9sv000m317ad3prhv18","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Nio系列之Java Nio","date":"2019-12-20T03:33:32.000Z","_content":"# 基础概念介绍\n\n## 1. 一个简单服务器的基本流程\n\n```mermaid\ngraph TB\nC --建立--> D\nC --建立--> D1\nsubgraph Socket生命周期\nD1(收到客户端连接完成) --> E1(生成普通Socket资源)\nE1 --> F1\nF1(Socket读写) --while loop --> F1\nF1 --> G1((关闭))\nend\nsubgraph Socket生命周期\nD(收到客户端连接完成) --> E(生成普通Socket资源)\nE --> F\nF(Socket读写) --while loop --> F\nF --> G((关闭))\nend\nsubgraph 创建Server Socket\nA(创建服务Socket资源) --> B(绑定服务端口)\nB --> C(开始监听Accept)\nend\n```\n\n## 2. 一切皆资源\n\n在Linux世界里，所有的资源都用描述符来表示，且对于IO资源都虚拟化为了文件，所以IO的描述符都叫文件描述即fd (file descriptor)。\n\n在简单服务器里，主要有两类资源，即服务端Server Socket以及普通连接Socket。\n- ServerSocket负责服务端口监听，当有请求进来时建立与客户端通信的socket连接。\n- 普通Socket负责与客户端的读写通信。\n\n例如Http是80端口，服务前监听80端口，然后每接收到一个请求，则建立一个普通的Socket。建立完Socket后，此后与客户端通信都只与这个socket有关，与ServerSocket无关了。\n\n## 3. Bio v.s. Nio\n\nBio: 顾名思义，在等待资源ready的时候都会阻塞，例如accept以及read和write。操作系统默认行为就是阻塞的，此时如果资源没有准备好，就会阻塞当前线程。\n\n由于IO会阻塞线程，所以对于BIO而言，就会有one connection per thread模型，即一个连接(connection)需要配一个线程。这种模式在大量连接时会存在缺陷，例如有一万个用户连接，就需要创建一万个线程，而线程也是要耗不少资源的，假如一个线程占内存512K，则一万个线程需要5G内存，所以导致难以支持一万个连接，更多细节请查看C10K问题。 （一个衍生：创建一个线程需要多少资源）\n\n为了解决C10K问题，为此引入了nio。顾名思义，nio是指IO不会阻塞，但nio重点并不是为了非阻塞，为的是**通过非阻塞进而引入的线程模型的变化，即可以通过利用一个线程来管理多个连接（Connection）资源，即multiple connection per thread模型**。\n\n# Java Nio\n先以一个简单的EchoServer为例，来介绍下Java Nio涉及到的核心知识。\n\n## 1. 简单EchoServer示例\n```java\npackage com.gaocher.learning.server.javanio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * @author Isaac Gao\n * @Date 2019/12/19\n */\npublic class EchoServer {\n  private static Selector selector;\n  public static void main(String[] args) {\n    try {\n      selector = Selector.open();\n//            We have to set connection host, port and non-blocking mode\n      ServerSocketChannel socket = ServerSocketChannel.open();\n      ServerSocket serverSocket = socket.socket();\n      serverSocket.bind(new InetSocketAddress(\"localhost\", 8089));\n      socket.configureBlocking(false);\n      int ops = socket.validOps();\n      SelectionKey register = socket.register(selector, ops, null);\n      while (true) {\n        selector.select();\n        Set<SelectionKey> selectedKeys = selector.selectedKeys();\n        Iterator<SelectionKey> i = selectedKeys.iterator();\n\n        while (i.hasNext()) {\n          SelectionKey key = i.next();\n\n          if (key.isAcceptable()) {\n//                        New client has been accepted\n            handleAccept(socket, key);\n          } else if (key.isReadable()) {\n//                        We can run non-blocking operation READ on our client\n            String data = handleRead(key);\n            handleWrite( data, (SocketChannel)key.channel());\n          }\n          i.remove();\n        }\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private static void handleAccept(ServerSocketChannel mySocket,\n      SelectionKey key) throws IOException {\n\n    System.out.println(\"Connection Accepted...\");\n\n    // Accept the connection and set non-blocking mode\n    SocketChannel client = mySocket.accept();\n    client.configureBlocking(false);\n\n    // Register that client is reading this channel\n    client.register(selector, SelectionKey.OP_READ);\n  }\n\n  private static String handleRead(SelectionKey key)\n      throws IOException {\n    System.out.println(\"Reading...\");\n    // create a ServerSocketChannel to read the request\n    SocketChannel client = (SocketChannel) key.channel();\n\n    // Create buffer to read data\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\n    client.read(buffer);\n//        Parse data from buffer to String\n    String data = new String(buffer.array()).trim();\n    if (data.length() > 0) {\n      System.out.println(\"Received message: \" + data);\n      if (data.equalsIgnoreCase(\"exit\")) {\n        client.close();\n        System.out.println(\"Connection closed...\");\n      }\n    }\n    return data;\n  }\n\n  private static void handleWrite(String data, SocketChannel client) {\n    byte[] bytes = data.getBytes();\n    ByteBuffer wrap = ByteBuffer.wrap(bytes);\n    try {\n      client.write(wrap);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n}\n```\n\n## 2. java nio 核心概念\n\n为了支持nio，java提供了一套抽象模型，即Selector、Channel、Buffer，除此之外，为了方便编程，还提供了一个组合体SelectionKey。\n- Selector: 对多个Connection进行管理，负责对感兴趣的事件（interested ops）进行注册监听\n- Channel：对Socket的抽象，即代表连接，读写操作都在此进行。\n- Buffer：读写缓冲，用户态的内存用于与内核态的数据buffer进行交换。\n- SelectionKey：用于表示一个Selector与Channel，重点是**attach的对象，可以方便的用于与Channel相关的Context存储**。\n\n具体关系如下：\n![Java Nio关系图](/images/java_nio_relation.png)\n\n一个channel为什么会有多个key？一个channel可被多个selector注册监听，所以需要用数组来保存keys。\n\n除了上面几个核心概念外，还有一个，就是ops，表示要关注的IO操作。\n\n虽然在关注的事件用Ops（Operation操作）来表示，但其实**应该用事件event更贴切**，其实Nio就是一个**基于事件的网络模型**。为了简化，Java将事件总共分为四种：\n```\npublic static final int OP_READ = 1 << 0;\n\npublic static final int OP_WRITE = 1 << 2;\n\npublic static final int OP_CONNECT = 1 << 3;\n\npublic static final int OP_ACCEPT = 1 << 4;\n\n```\n其中serversocketChannel只有Accept，另外三个属于普通的SocketChannel，为了方便，java通过Channel.validOps()硬编码了这个知识。\n\n## 3. 基本流程\n\n1. 创建相关资源\n```\nselector = Selector.open();\nServerSocketChannel socket = ServerSocketChannel.open();\nServerSocket serverSocket = socket.socket();\nserverSocket.bind(new InetSocketAddress(\"localhost\", 8089));\nsocket.configureBlocking(false);\n```\n2. 注册channel到selector\n```\nint ops = socket.validOps();\nSelectionKey register = socket.register(selector, ops, null);\n```\n3. 开启循环监听\n```\nwhile(true) {\n    selector.select(); //若无事件产生，则阻塞\n    Set<SelectionKey> selectedKeys = selector.selectedKeys(); //获取已经ready的SelectionKey\n    //... 进行读写、关闭等操作\n}\n```\n4. 处理事件\n```\n  SelectionKey key = i.next();\n\n  if (key.isAcceptable()) {\n    // New client has been accepted\n    handleAccept(socket, key);\n  } else if (key.isReadable()) {\n    // We can run non-blocking operation READ on our client\n    String data = handleRead(key);\n    handleWrite( data, (SocketChannel)key.channel());\n  }\n```\n注意，这里写数据的时候并没有使用Nio，而是直接调用channel.write（Bio的方式）的方式来实现，因为写数据往往都是ready的，除非是缓冲区已满无法写入。所以对于写操作而言，用Bio方式更快一些。\n\n5. 删除事件\n```\n    Iterator<SelectionKey> i = selectedKeys.iterator();\n    //...\n    i.remove();\n```\nSelector不会对selectedKeys做删除，当有事件触发后，则key会一直存在，所以需要手动删除。\n\n## 4. doSelect源码\n```java\n    protected int doSelect(long timeout) throws IOException {\n        if (closed)\n            throw new ClosedSelectorException();\n        processDeregisterQueue();\n        try {\n            begin();\n            pollWrapper.poll(timeout);\n        } finally {\n            end();\n        }\n        processDeregisterQueue(); //对于需要cancel的key进行deregister\n        int numKeysUpdated = updateSelectedKeys();\n        if (pollWrapper.interrupted()) {\n            // Clear the wakeup pipe\n            pollWrapper.putEventOps(pollWrapper.interruptedIndex(), 0);\n            synchronized (interruptLock) {\n                pollWrapper.clearInterrupted();\n                IOUtil.drain(fd0);\n                interruptTriggered = false;\n            }\n        }\n        return numKeysUpdated;\n    }\n    private int updateSelectedKeys() {\n        int entries = pollWrapper.updated;\n        int numKeysUpdated = 0;\n        for (int i=0; i<entries; i++) {\n            int nextFD = pollWrapper.getDescriptor(i);\n            SelectionKeyImpl ski = fdToKey.get(Integer.valueOf(nextFD));\n            // ski is null in the case of an interrupt\n            if (ski != null) {\n                int rOps = pollWrapper.getEventOps(i);\n                if (selectedKeys.contains(ski)) {\n                    if (ski.channel.translateAndSetReadyOps(rOps, ski)) {\n                        numKeysUpdated++;\n                    }\n                } else {\n                    ski.channel.translateAndSetReadyOps(rOps, ski);\n                    if ((ski.nioReadyOps() & ski.nioInterestOps()) != 0) {\n                        selectedKeys.add(ski);\n                        numKeysUpdated++;\n                    }\n                }\n            }\n        }\n        return numKeysUpdated;\n    }\n\n```\n\n* processDeregisterQueue()\n\n有注册就有解注册，在主循环里，除了返回感兴趣的事件外，也要对不需要的key进行删除，例如channel已经关闭，则与该channel相关的key就需要删除，否则selector关注的key会越来越多，而导致性能变慢。\n\n* updateSelectedKeys\n\n根据操作系统底层返回的描述符fd，利用fdToKey获取java层面的SelectionKey\n\n* translateAndSetReadyOps\n\n将底层IO操作转义为java的Nio操作。由于Nio要支持多种协议，不单单只是tcp，所以要将其他IO操作转义为Java定义的4种IO操作。\n\n* 为什么需要ski.nioReadyOps() & ski.nioInterestOps()进行对比\n\n因为write事件是一直ready的，若不和interestOps比较，会频繁触发该Key。\n\n## 5. selector成员变量\n```java\n  protected Set<SelectionKey> selectedKeys = new HashSet();\n  protected HashSet<SelectionKey> keys = new HashSet();\n  private Set<SelectionKey> publicKeys;\n  private Set<SelectionKey> publicSelectedKeys;\n\n  protected SelectorImpl(SelectorProvider var1) {\n    super(var1);\n    if (Util.atBugLevel(\"1.4\")) {\n      this.publicKeys = this.keys;\n      this.publicSelectedKeys = this.selectedKeys;\n    } else {\n      this.publicKeys = Collections.unmodifiableSet(this.keys);\n      this.publicSelectedKeys = Util.ungrowableSet(this.selectedKeys);\n    }\n\n  }\n```\n\n- keys: 所有用户感兴趣的SelectionKey，每个channel只注册一个key到selector上，**重复注册无效**\n- selectedKeys: 监听到对应事件的keys而返回。**selectedKeys不会做删除，当有事件触发后，则key会一直存在。所以需要手动删除。即需要selectedKeys.iterator().remove()**\n- public*: 用户可访问的key，对原始的key进行不可修改或不可增长的封装\n- selectedKeys.iterator().remove()：只是从selectedKeys列表里去除，并没有删除key本身，key本身仍然在channel里被引用，所以无需担心会重新创建而有影响。\n\n# 遗留问题\n本文只是初略的概括了Nio在java中的使用，但并未深入到在真实案例中的使用，例如nio在tomcat与netty下的具体实现，后续会继续展开描述，nio在tomcat与netty下的实战。除此以外，还有以下细节并未探索：\n1. LT模式 v.s. ET模式\n    -  LT模式 —— 如何利用de-register来优化selector监听\n    -  ET模式时，Write事件会一直有吗？\n2. de-register后，何时重新注册ops\n3. 同样的端口，操作系统如何区分ServerSocket与普通socket。\n4. PollSelector初始化详细过程\n5. Buffer为什么需要flip（读写共用）\n6. 如何知道connection已经断开","source":"_posts/Java_Nio.md","raw":"---\ntitle: Nio系列之Java Nio\ndate: 2019-12-20 11:33:32\ntags:\ncategories: \n    - 网络\n    - Nio\n---\n# 基础概念介绍\n\n## 1. 一个简单服务器的基本流程\n\n```mermaid\ngraph TB\nC --建立--> D\nC --建立--> D1\nsubgraph Socket生命周期\nD1(收到客户端连接完成) --> E1(生成普通Socket资源)\nE1 --> F1\nF1(Socket读写) --while loop --> F1\nF1 --> G1((关闭))\nend\nsubgraph Socket生命周期\nD(收到客户端连接完成) --> E(生成普通Socket资源)\nE --> F\nF(Socket读写) --while loop --> F\nF --> G((关闭))\nend\nsubgraph 创建Server Socket\nA(创建服务Socket资源) --> B(绑定服务端口)\nB --> C(开始监听Accept)\nend\n```\n\n## 2. 一切皆资源\n\n在Linux世界里，所有的资源都用描述符来表示，且对于IO资源都虚拟化为了文件，所以IO的描述符都叫文件描述即fd (file descriptor)。\n\n在简单服务器里，主要有两类资源，即服务端Server Socket以及普通连接Socket。\n- ServerSocket负责服务端口监听，当有请求进来时建立与客户端通信的socket连接。\n- 普通Socket负责与客户端的读写通信。\n\n例如Http是80端口，服务前监听80端口，然后每接收到一个请求，则建立一个普通的Socket。建立完Socket后，此后与客户端通信都只与这个socket有关，与ServerSocket无关了。\n\n## 3. Bio v.s. Nio\n\nBio: 顾名思义，在等待资源ready的时候都会阻塞，例如accept以及read和write。操作系统默认行为就是阻塞的，此时如果资源没有准备好，就会阻塞当前线程。\n\n由于IO会阻塞线程，所以对于BIO而言，就会有one connection per thread模型，即一个连接(connection)需要配一个线程。这种模式在大量连接时会存在缺陷，例如有一万个用户连接，就需要创建一万个线程，而线程也是要耗不少资源的，假如一个线程占内存512K，则一万个线程需要5G内存，所以导致难以支持一万个连接，更多细节请查看C10K问题。 （一个衍生：创建一个线程需要多少资源）\n\n为了解决C10K问题，为此引入了nio。顾名思义，nio是指IO不会阻塞，但nio重点并不是为了非阻塞，为的是**通过非阻塞进而引入的线程模型的变化，即可以通过利用一个线程来管理多个连接（Connection）资源，即multiple connection per thread模型**。\n\n# Java Nio\n先以一个简单的EchoServer为例，来介绍下Java Nio涉及到的核心知识。\n\n## 1. 简单EchoServer示例\n```java\npackage com.gaocher.learning.server.javanio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * @author Isaac Gao\n * @Date 2019/12/19\n */\npublic class EchoServer {\n  private static Selector selector;\n  public static void main(String[] args) {\n    try {\n      selector = Selector.open();\n//            We have to set connection host, port and non-blocking mode\n      ServerSocketChannel socket = ServerSocketChannel.open();\n      ServerSocket serverSocket = socket.socket();\n      serverSocket.bind(new InetSocketAddress(\"localhost\", 8089));\n      socket.configureBlocking(false);\n      int ops = socket.validOps();\n      SelectionKey register = socket.register(selector, ops, null);\n      while (true) {\n        selector.select();\n        Set<SelectionKey> selectedKeys = selector.selectedKeys();\n        Iterator<SelectionKey> i = selectedKeys.iterator();\n\n        while (i.hasNext()) {\n          SelectionKey key = i.next();\n\n          if (key.isAcceptable()) {\n//                        New client has been accepted\n            handleAccept(socket, key);\n          } else if (key.isReadable()) {\n//                        We can run non-blocking operation READ on our client\n            String data = handleRead(key);\n            handleWrite( data, (SocketChannel)key.channel());\n          }\n          i.remove();\n        }\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private static void handleAccept(ServerSocketChannel mySocket,\n      SelectionKey key) throws IOException {\n\n    System.out.println(\"Connection Accepted...\");\n\n    // Accept the connection and set non-blocking mode\n    SocketChannel client = mySocket.accept();\n    client.configureBlocking(false);\n\n    // Register that client is reading this channel\n    client.register(selector, SelectionKey.OP_READ);\n  }\n\n  private static String handleRead(SelectionKey key)\n      throws IOException {\n    System.out.println(\"Reading...\");\n    // create a ServerSocketChannel to read the request\n    SocketChannel client = (SocketChannel) key.channel();\n\n    // Create buffer to read data\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\n    client.read(buffer);\n//        Parse data from buffer to String\n    String data = new String(buffer.array()).trim();\n    if (data.length() > 0) {\n      System.out.println(\"Received message: \" + data);\n      if (data.equalsIgnoreCase(\"exit\")) {\n        client.close();\n        System.out.println(\"Connection closed...\");\n      }\n    }\n    return data;\n  }\n\n  private static void handleWrite(String data, SocketChannel client) {\n    byte[] bytes = data.getBytes();\n    ByteBuffer wrap = ByteBuffer.wrap(bytes);\n    try {\n      client.write(wrap);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n}\n```\n\n## 2. java nio 核心概念\n\n为了支持nio，java提供了一套抽象模型，即Selector、Channel、Buffer，除此之外，为了方便编程，还提供了一个组合体SelectionKey。\n- Selector: 对多个Connection进行管理，负责对感兴趣的事件（interested ops）进行注册监听\n- Channel：对Socket的抽象，即代表连接，读写操作都在此进行。\n- Buffer：读写缓冲，用户态的内存用于与内核态的数据buffer进行交换。\n- SelectionKey：用于表示一个Selector与Channel，重点是**attach的对象，可以方便的用于与Channel相关的Context存储**。\n\n具体关系如下：\n![Java Nio关系图](/images/java_nio_relation.png)\n\n一个channel为什么会有多个key？一个channel可被多个selector注册监听，所以需要用数组来保存keys。\n\n除了上面几个核心概念外，还有一个，就是ops，表示要关注的IO操作。\n\n虽然在关注的事件用Ops（Operation操作）来表示，但其实**应该用事件event更贴切**，其实Nio就是一个**基于事件的网络模型**。为了简化，Java将事件总共分为四种：\n```\npublic static final int OP_READ = 1 << 0;\n\npublic static final int OP_WRITE = 1 << 2;\n\npublic static final int OP_CONNECT = 1 << 3;\n\npublic static final int OP_ACCEPT = 1 << 4;\n\n```\n其中serversocketChannel只有Accept，另外三个属于普通的SocketChannel，为了方便，java通过Channel.validOps()硬编码了这个知识。\n\n## 3. 基本流程\n\n1. 创建相关资源\n```\nselector = Selector.open();\nServerSocketChannel socket = ServerSocketChannel.open();\nServerSocket serverSocket = socket.socket();\nserverSocket.bind(new InetSocketAddress(\"localhost\", 8089));\nsocket.configureBlocking(false);\n```\n2. 注册channel到selector\n```\nint ops = socket.validOps();\nSelectionKey register = socket.register(selector, ops, null);\n```\n3. 开启循环监听\n```\nwhile(true) {\n    selector.select(); //若无事件产生，则阻塞\n    Set<SelectionKey> selectedKeys = selector.selectedKeys(); //获取已经ready的SelectionKey\n    //... 进行读写、关闭等操作\n}\n```\n4. 处理事件\n```\n  SelectionKey key = i.next();\n\n  if (key.isAcceptable()) {\n    // New client has been accepted\n    handleAccept(socket, key);\n  } else if (key.isReadable()) {\n    // We can run non-blocking operation READ on our client\n    String data = handleRead(key);\n    handleWrite( data, (SocketChannel)key.channel());\n  }\n```\n注意，这里写数据的时候并没有使用Nio，而是直接调用channel.write（Bio的方式）的方式来实现，因为写数据往往都是ready的，除非是缓冲区已满无法写入。所以对于写操作而言，用Bio方式更快一些。\n\n5. 删除事件\n```\n    Iterator<SelectionKey> i = selectedKeys.iterator();\n    //...\n    i.remove();\n```\nSelector不会对selectedKeys做删除，当有事件触发后，则key会一直存在，所以需要手动删除。\n\n## 4. doSelect源码\n```java\n    protected int doSelect(long timeout) throws IOException {\n        if (closed)\n            throw new ClosedSelectorException();\n        processDeregisterQueue();\n        try {\n            begin();\n            pollWrapper.poll(timeout);\n        } finally {\n            end();\n        }\n        processDeregisterQueue(); //对于需要cancel的key进行deregister\n        int numKeysUpdated = updateSelectedKeys();\n        if (pollWrapper.interrupted()) {\n            // Clear the wakeup pipe\n            pollWrapper.putEventOps(pollWrapper.interruptedIndex(), 0);\n            synchronized (interruptLock) {\n                pollWrapper.clearInterrupted();\n                IOUtil.drain(fd0);\n                interruptTriggered = false;\n            }\n        }\n        return numKeysUpdated;\n    }\n    private int updateSelectedKeys() {\n        int entries = pollWrapper.updated;\n        int numKeysUpdated = 0;\n        for (int i=0; i<entries; i++) {\n            int nextFD = pollWrapper.getDescriptor(i);\n            SelectionKeyImpl ski = fdToKey.get(Integer.valueOf(nextFD));\n            // ski is null in the case of an interrupt\n            if (ski != null) {\n                int rOps = pollWrapper.getEventOps(i);\n                if (selectedKeys.contains(ski)) {\n                    if (ski.channel.translateAndSetReadyOps(rOps, ski)) {\n                        numKeysUpdated++;\n                    }\n                } else {\n                    ski.channel.translateAndSetReadyOps(rOps, ski);\n                    if ((ski.nioReadyOps() & ski.nioInterestOps()) != 0) {\n                        selectedKeys.add(ski);\n                        numKeysUpdated++;\n                    }\n                }\n            }\n        }\n        return numKeysUpdated;\n    }\n\n```\n\n* processDeregisterQueue()\n\n有注册就有解注册，在主循环里，除了返回感兴趣的事件外，也要对不需要的key进行删除，例如channel已经关闭，则与该channel相关的key就需要删除，否则selector关注的key会越来越多，而导致性能变慢。\n\n* updateSelectedKeys\n\n根据操作系统底层返回的描述符fd，利用fdToKey获取java层面的SelectionKey\n\n* translateAndSetReadyOps\n\n将底层IO操作转义为java的Nio操作。由于Nio要支持多种协议，不单单只是tcp，所以要将其他IO操作转义为Java定义的4种IO操作。\n\n* 为什么需要ski.nioReadyOps() & ski.nioInterestOps()进行对比\n\n因为write事件是一直ready的，若不和interestOps比较，会频繁触发该Key。\n\n## 5. selector成员变量\n```java\n  protected Set<SelectionKey> selectedKeys = new HashSet();\n  protected HashSet<SelectionKey> keys = new HashSet();\n  private Set<SelectionKey> publicKeys;\n  private Set<SelectionKey> publicSelectedKeys;\n\n  protected SelectorImpl(SelectorProvider var1) {\n    super(var1);\n    if (Util.atBugLevel(\"1.4\")) {\n      this.publicKeys = this.keys;\n      this.publicSelectedKeys = this.selectedKeys;\n    } else {\n      this.publicKeys = Collections.unmodifiableSet(this.keys);\n      this.publicSelectedKeys = Util.ungrowableSet(this.selectedKeys);\n    }\n\n  }\n```\n\n- keys: 所有用户感兴趣的SelectionKey，每个channel只注册一个key到selector上，**重复注册无效**\n- selectedKeys: 监听到对应事件的keys而返回。**selectedKeys不会做删除，当有事件触发后，则key会一直存在。所以需要手动删除。即需要selectedKeys.iterator().remove()**\n- public*: 用户可访问的key，对原始的key进行不可修改或不可增长的封装\n- selectedKeys.iterator().remove()：只是从selectedKeys列表里去除，并没有删除key本身，key本身仍然在channel里被引用，所以无需担心会重新创建而有影响。\n\n# 遗留问题\n本文只是初略的概括了Nio在java中的使用，但并未深入到在真实案例中的使用，例如nio在tomcat与netty下的具体实现，后续会继续展开描述，nio在tomcat与netty下的实战。除此以外，还有以下细节并未探索：\n1. LT模式 v.s. ET模式\n    -  LT模式 —— 如何利用de-register来优化selector监听\n    -  ET模式时，Write事件会一直有吗？\n2. de-register后，何时重新注册ops\n3. 同样的端口，操作系统如何区分ServerSocket与普通socket。\n4. PollSelector初始化详细过程\n5. Buffer为什么需要flip（读写共用）\n6. 如何知道connection已经断开","slug":"Java_Nio","published":1,"updated":"2019-12-29T15:25:39.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4r6b9rh0000317a22esdldx","content":"<h1 id=\"基础概念介绍\"><a href=\"#基础概念介绍\" class=\"headerlink\" title=\"基础概念介绍\"></a>基础概念介绍</h1><h2 id=\"1-一个简单服务器的基本流程\"><a href=\"#1-一个简单服务器的基本流程\" class=\"headerlink\" title=\"1. 一个简单服务器的基本流程\"></a>1. 一个简单服务器的基本流程</h2><pre class=\"mermaid\">graph TB\nC --建立--> D\nC --建立--> D1\nsubgraph Socket生命周期\nD1(收到客户端连接完成) --> E1(生成普通Socket资源)\nE1 --> F1\nF1(Socket读写) --while loop --> F1\nF1 --> G1((关闭))\nend\nsubgraph Socket生命周期\nD(收到客户端连接完成) --> E(生成普通Socket资源)\nE --> F\nF(Socket读写) --while loop --> F\nF --> G((关闭))\nend\nsubgraph 创建Server Socket\nA(创建服务Socket资源) --> B(绑定服务端口)\nB --> C(开始监听Accept)\nend</pre>\n\n<h2 id=\"2-一切皆资源\"><a href=\"#2-一切皆资源\" class=\"headerlink\" title=\"2. 一切皆资源\"></a>2. 一切皆资源</h2><p>在Linux世界里，所有的资源都用描述符来表示，且对于IO资源都虚拟化为了文件，所以IO的描述符都叫文件描述即fd (file descriptor)。</p>\n<p>在简单服务器里，主要有两类资源，即服务端Server Socket以及普通连接Socket。</p>\n<ul>\n<li>ServerSocket负责服务端口监听，当有请求进来时建立与客户端通信的socket连接。</li>\n<li>普通Socket负责与客户端的读写通信。</li>\n</ul>\n<p>例如Http是80端口，服务前监听80端口，然后每接收到一个请求，则建立一个普通的Socket。建立完Socket后，此后与客户端通信都只与这个socket有关，与ServerSocket无关了。</p>\n<h2 id=\"3-Bio-v-s-Nio\"><a href=\"#3-Bio-v-s-Nio\" class=\"headerlink\" title=\"3. Bio v.s. Nio\"></a>3. Bio v.s. Nio</h2><p>Bio: 顾名思义，在等待资源ready的时候都会阻塞，例如accept以及read和write。操作系统默认行为就是阻塞的，此时如果资源没有准备好，就会阻塞当前线程。</p>\n<p>由于IO会阻塞线程，所以对于BIO而言，就会有one connection per thread模型，即一个连接(connection)需要配一个线程。这种模式在大量连接时会存在缺陷，例如有一万个用户连接，就需要创建一万个线程，而线程也是要耗不少资源的，假如一个线程占内存512K，则一万个线程需要5G内存，所以导致难以支持一万个连接，更多细节请查看C10K问题。 （一个衍生：创建一个线程需要多少资源）</p>\n<p>为了解决C10K问题，为此引入了nio。顾名思义，nio是指IO不会阻塞，但nio重点并不是为了非阻塞，为的是<strong>通过非阻塞进而引入的线程模型的变化，即可以通过利用一个线程来管理多个连接（Connection）资源，即multiple connection per thread模型</strong>。</p>\n<h1 id=\"Java-Nio\"><a href=\"#Java-Nio\" class=\"headerlink\" title=\"Java Nio\"></a>Java Nio</h1><p>先以一个简单的EchoServer为例，来介绍下Java Nio涉及到的核心知识。</p>\n<h2 id=\"1-简单EchoServer示例\"><a href=\"#1-简单EchoServer示例\" class=\"headerlink\" title=\"1. 简单EchoServer示例\"></a>1. 简单EchoServer示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaocher.learning.server.javanio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Isaac Gao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2019/12/19</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Selector selector;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      selector = Selector.open();</span><br><span class=\"line\"><span class=\"comment\">//            We have to set connection host, port and non-blocking mode</span></span><br><span class=\"line\">      ServerSocketChannel socket = ServerSocketChannel.open();</span><br><span class=\"line\">      ServerSocket serverSocket = socket.socket();</span><br><span class=\"line\">      serverSocket.bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8089</span>));</span><br><span class=\"line\">      socket.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> ops = socket.validOps();</span><br><span class=\"line\">      SelectionKey register = socket.register(selector, ops, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        selector.select();</span><br><span class=\"line\">        Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class=\"line\">        Iterator&lt;SelectionKey&gt; i = selectedKeys.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i.hasNext()) &#123;</span><br><span class=\"line\">          SelectionKey key = i.next();</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                        New client has been accepted</span></span><br><span class=\"line\">            handleAccept(socket, key);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                        We can run non-blocking operation READ on our client</span></span><br><span class=\"line\">            String data = handleRead(key);</span><br><span class=\"line\">            handleWrite( data, (SocketChannel)key.channel());</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          i.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleAccept</span><span class=\"params\">(ServerSocketChannel mySocket,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      SelectionKey key)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Connection Accepted...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Accept the connection and set non-blocking mode</span></span><br><span class=\"line\">    SocketChannel client = mySocket.accept();</span><br><span class=\"line\">    client.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register that client is reading this channel</span></span><br><span class=\"line\">    client.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">handleRead</span><span class=\"params\">(SelectionKey key)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Reading...\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// create a ServerSocketChannel to read the request</span></span><br><span class=\"line\">    SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create buffer to read data</span></span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    client.read(buffer);</span><br><span class=\"line\"><span class=\"comment\">//        Parse data from buffer to String</span></span><br><span class=\"line\">    String data = <span class=\"keyword\">new</span> String(buffer.array()).trim();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Received message: \"</span> + data);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.equalsIgnoreCase(<span class=\"string\">\"exit\"</span>)) &#123;</span><br><span class=\"line\">        client.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Connection closed...\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleWrite</span><span class=\"params\">(String data, SocketChannel client)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = data.getBytes();</span><br><span class=\"line\">    ByteBuffer wrap = ByteBuffer.wrap(bytes);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      client.write(wrap);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-java-nio-核心概念\"><a href=\"#2-java-nio-核心概念\" class=\"headerlink\" title=\"2. java nio 核心概念\"></a>2. java nio 核心概念</h2><p>为了支持nio，java提供了一套抽象模型，即Selector、Channel、Buffer，除此之外，为了方便编程，还提供了一个组合体SelectionKey。</p>\n<ul>\n<li>Selector: 对多个Connection进行管理，负责对感兴趣的事件（interested ops）进行注册监听</li>\n<li>Channel：对Socket的抽象，即代表连接，读写操作都在此进行。</li>\n<li>Buffer：读写缓冲，用户态的内存用于与内核态的数据buffer进行交换。</li>\n<li>SelectionKey：用于表示一个Selector与Channel，重点是<strong>attach的对象，可以方便的用于与Channel相关的Context存储</strong>。</li>\n</ul>\n<p>具体关系如下：<br><img src=\"/images/java_nio_relation.png\" alt=\"Java Nio关系图\"></p>\n<p>一个channel为什么会有多个key？一个channel可被多个selector注册监听，所以需要用数组来保存keys。</p>\n<p>除了上面几个核心概念外，还有一个，就是ops，表示要关注的IO操作。</p>\n<p>虽然在关注的事件用Ops（Operation操作）来表示，但其实<strong>应该用事件event更贴切</strong>，其实Nio就是一个<strong>基于事件的网络模型</strong>。为了简化，Java将事件总共分为四种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final int OP_READ &#x3D; 1 &lt;&lt; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">public static final int OP_WRITE &#x3D; 1 &lt;&lt; 2;</span><br><span class=\"line\"></span><br><span class=\"line\">public static final int OP_CONNECT &#x3D; 1 &lt;&lt; 3;</span><br><span class=\"line\"></span><br><span class=\"line\">public static final int OP_ACCEPT &#x3D; 1 &lt;&lt; 4;</span><br></pre></td></tr></table></figure>\n<p>其中serversocketChannel只有Accept，另外三个属于普通的SocketChannel，为了方便，java通过Channel.validOps()硬编码了这个知识。</p>\n<h2 id=\"3-基本流程\"><a href=\"#3-基本流程\" class=\"headerlink\" title=\"3. 基本流程\"></a>3. 基本流程</h2><ol>\n<li><p>创建相关资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector &#x3D; Selector.open();</span><br><span class=\"line\">ServerSocketChannel socket &#x3D; ServerSocketChannel.open();</span><br><span class=\"line\">ServerSocket serverSocket &#x3D; socket.socket();</span><br><span class=\"line\">serverSocket.bind(new InetSocketAddress(&quot;localhost&quot;, 8089));</span><br><span class=\"line\">socket.configureBlocking(false);</span><br></pre></td></tr></table></figure></li>\n<li><p>注册channel到selector</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int ops &#x3D; socket.validOps();</span><br><span class=\"line\">SelectionKey register &#x3D; socket.register(selector, ops, null);</span><br></pre></td></tr></table></figure></li>\n<li><p>开启循环监听</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(true) &#123;</span><br><span class=\"line\">    selector.select(); &#x2F;&#x2F;若无事件产生，则阻塞</span><br><span class=\"line\">    Set&lt;SelectionKey&gt; selectedKeys &#x3D; selector.selectedKeys(); &#x2F;&#x2F;获取已经ready的SelectionKey</span><br><span class=\"line\">    &#x2F;&#x2F;... 进行读写、关闭等操作</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>处理事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SelectionKey key &#x3D; i.next();</span><br><span class=\"line\"></span><br><span class=\"line\">if (key.isAcceptable()) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; New client has been accepted</span><br><span class=\"line\">  handleAccept(socket, key);</span><br><span class=\"line\">&#125; else if (key.isReadable()) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; We can run non-blocking operation READ on our client</span><br><span class=\"line\">  String data &#x3D; handleRead(key);</span><br><span class=\"line\">  handleWrite( data, (SocketChannel)key.channel());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，这里写数据的时候并没有使用Nio，而是直接调用channel.write（Bio的方式）的方式来实现，因为写数据往往都是ready的，除非是缓冲区已满无法写入。所以对于写操作而言，用Bio方式更快一些。</p>\n</li>\n<li><p>删除事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator&lt;SelectionKey&gt; i &#x3D; selectedKeys.iterator();</span><br><span class=\"line\">&#x2F;&#x2F;...</span><br><span class=\"line\">i.remove();</span><br></pre></td></tr></table></figure>\n<p>Selector不会对selectedKeys做删除，当有事件触发后，则key会一直存在，所以需要手动删除。</p>\n</li>\n</ol>\n<h2 id=\"4-doSelect源码\"><a href=\"#4-doSelect源码\" class=\"headerlink\" title=\"4. doSelect源码\"></a>4. doSelect源码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">doSelect</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (closed)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClosedSelectorException();</span><br><span class=\"line\">    processDeregisterQueue();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        begin();</span><br><span class=\"line\">        pollWrapper.poll(timeout);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    processDeregisterQueue(); <span class=\"comment\">//对于需要cancel的key进行deregister</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> numKeysUpdated = updateSelectedKeys();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pollWrapper.interrupted()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Clear the wakeup pipe</span></span><br><span class=\"line\">        pollWrapper.putEventOps(pollWrapper.interruptedIndex(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (interruptLock) &#123;</span><br><span class=\"line\">            pollWrapper.clearInterrupted();</span><br><span class=\"line\">            IOUtil.drain(fd0);</span><br><span class=\"line\">            interruptTriggered = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numKeysUpdated;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">updateSelectedKeys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> entries = pollWrapper.updated;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numKeysUpdated = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;entries; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextFD = pollWrapper.getDescriptor(i);</span><br><span class=\"line\">        SelectionKeyImpl ski = fdToKey.get(Integer.valueOf(nextFD));</span><br><span class=\"line\">        <span class=\"comment\">// ski is null in the case of an interrupt</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ski != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rOps = pollWrapper.getEventOps(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (selectedKeys.contains(ski)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ski.channel.translateAndSetReadyOps(rOps, ski)) &#123;</span><br><span class=\"line\">                    numKeysUpdated++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ski.channel.translateAndSetReadyOps(rOps, ski);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((ski.nioReadyOps() &amp; ski.nioInterestOps()) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    selectedKeys.add(ski);</span><br><span class=\"line\">                    numKeysUpdated++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numKeysUpdated;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>processDeregisterQueue()</li>\n</ul>\n<p>有注册就有解注册，在主循环里，除了返回感兴趣的事件外，也要对不需要的key进行删除，例如channel已经关闭，则与该channel相关的key就需要删除，否则selector关注的key会越来越多，而导致性能变慢。</p>\n<ul>\n<li>updateSelectedKeys</li>\n</ul>\n<p>根据操作系统底层返回的描述符fd，利用fdToKey获取java层面的SelectionKey</p>\n<ul>\n<li>translateAndSetReadyOps</li>\n</ul>\n<p>将底层IO操作转义为java的Nio操作。由于Nio要支持多种协议，不单单只是tcp，所以要将其他IO操作转义为Java定义的4种IO操作。</p>\n<ul>\n<li>为什么需要ski.nioReadyOps() &amp; ski.nioInterestOps()进行对比</li>\n</ul>\n<p>因为write事件是一直ready的，若不和interestOps比较，会频繁触发该Key。</p>\n<h2 id=\"5-selector成员变量\"><a href=\"#5-selector成员变量\" class=\"headerlink\" title=\"5. selector成员变量\"></a>5. selector成员变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Set&lt;SelectionKey&gt; selectedKeys = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\"><span class=\"keyword\">protected</span> HashSet&lt;SelectionKey&gt; keys = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\"><span class=\"keyword\">private</span> Set&lt;SelectionKey&gt; publicKeys;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Set&lt;SelectionKey&gt; publicSelectedKeys;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">SelectorImpl</span><span class=\"params\">(SelectorProvider var1)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(var1);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.atBugLevel(<span class=\"string\">\"1.4\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.publicKeys = <span class=\"keyword\">this</span>.keys;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.publicSelectedKeys = <span class=\"keyword\">this</span>.selectedKeys;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.publicKeys = Collections.unmodifiableSet(<span class=\"keyword\">this</span>.keys);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.publicSelectedKeys = Util.ungrowableSet(<span class=\"keyword\">this</span>.selectedKeys);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>keys: 所有用户感兴趣的SelectionKey，每个channel只注册一个key到selector上，<strong>重复注册无效</strong></li>\n<li>selectedKeys: 监听到对应事件的keys而返回。<strong>selectedKeys不会做删除，当有事件触发后，则key会一直存在。所以需要手动删除。即需要selectedKeys.iterator().remove()</strong></li>\n<li>public*: 用户可访问的key，对原始的key进行不可修改或不可增长的封装</li>\n<li>selectedKeys.iterator().remove()：只是从selectedKeys列表里去除，并没有删除key本身，key本身仍然在channel里被引用，所以无需担心会重新创建而有影响。</li>\n</ul>\n<h1 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h1><p>本文只是初略的概括了Nio在java中的使用，但并未深入到在真实案例中的使用，例如nio在tomcat与netty下的具体实现，后续会继续展开描述，nio在tomcat与netty下的实战。除此以外，还有以下细节并未探索：</p>\n<ol>\n<li>LT模式 v.s. ET模式<ul>\n<li>LT模式 —— 如何利用de-register来优化selector监听</li>\n<li>ET模式时，Write事件会一直有吗？</li>\n</ul>\n</li>\n<li>de-register后，何时重新注册ops</li>\n<li>同样的端口，操作系统如何区分ServerSocket与普通socket。</li>\n<li>PollSelector初始化详细过程</li>\n<li>Buffer为什么需要flip（读写共用）</li>\n<li>如何知道connection已经断开</li>\n</ol>\n","site":{"data":{}},"length":8468,"excerpt":"","more":"<h1 id=\"基础概念介绍\"><a href=\"#基础概念介绍\" class=\"headerlink\" title=\"基础概念介绍\"></a>基础概念介绍</h1><h2 id=\"1-一个简单服务器的基本流程\"><a href=\"#1-一个简单服务器的基本流程\" class=\"headerlink\" title=\"1. 一个简单服务器的基本流程\"></a>1. 一个简单服务器的基本流程</h2><pre class=\"mermaid\">graph TB\nC --建立--> D\nC --建立--> D1\nsubgraph Socket生命周期\nD1(收到客户端连接完成) --> E1(生成普通Socket资源)\nE1 --> F1\nF1(Socket读写) --while loop --> F1\nF1 --> G1((关闭))\nend\nsubgraph Socket生命周期\nD(收到客户端连接完成) --> E(生成普通Socket资源)\nE --> F\nF(Socket读写) --while loop --> F\nF --> G((关闭))\nend\nsubgraph 创建Server Socket\nA(创建服务Socket资源) --> B(绑定服务端口)\nB --> C(开始监听Accept)\nend</pre>\n\n<h2 id=\"2-一切皆资源\"><a href=\"#2-一切皆资源\" class=\"headerlink\" title=\"2. 一切皆资源\"></a>2. 一切皆资源</h2><p>在Linux世界里，所有的资源都用描述符来表示，且对于IO资源都虚拟化为了文件，所以IO的描述符都叫文件描述即fd (file descriptor)。</p>\n<p>在简单服务器里，主要有两类资源，即服务端Server Socket以及普通连接Socket。</p>\n<ul>\n<li>ServerSocket负责服务端口监听，当有请求进来时建立与客户端通信的socket连接。</li>\n<li>普通Socket负责与客户端的读写通信。</li>\n</ul>\n<p>例如Http是80端口，服务前监听80端口，然后每接收到一个请求，则建立一个普通的Socket。建立完Socket后，此后与客户端通信都只与这个socket有关，与ServerSocket无关了。</p>\n<h2 id=\"3-Bio-v-s-Nio\"><a href=\"#3-Bio-v-s-Nio\" class=\"headerlink\" title=\"3. Bio v.s. Nio\"></a>3. Bio v.s. Nio</h2><p>Bio: 顾名思义，在等待资源ready的时候都会阻塞，例如accept以及read和write。操作系统默认行为就是阻塞的，此时如果资源没有准备好，就会阻塞当前线程。</p>\n<p>由于IO会阻塞线程，所以对于BIO而言，就会有one connection per thread模型，即一个连接(connection)需要配一个线程。这种模式在大量连接时会存在缺陷，例如有一万个用户连接，就需要创建一万个线程，而线程也是要耗不少资源的，假如一个线程占内存512K，则一万个线程需要5G内存，所以导致难以支持一万个连接，更多细节请查看C10K问题。 （一个衍生：创建一个线程需要多少资源）</p>\n<p>为了解决C10K问题，为此引入了nio。顾名思义，nio是指IO不会阻塞，但nio重点并不是为了非阻塞，为的是<strong>通过非阻塞进而引入的线程模型的变化，即可以通过利用一个线程来管理多个连接（Connection）资源，即multiple connection per thread模型</strong>。</p>\n<h1 id=\"Java-Nio\"><a href=\"#Java-Nio\" class=\"headerlink\" title=\"Java Nio\"></a>Java Nio</h1><p>先以一个简单的EchoServer为例，来介绍下Java Nio涉及到的核心知识。</p>\n<h2 id=\"1-简单EchoServer示例\"><a href=\"#1-简单EchoServer示例\" class=\"headerlink\" title=\"1. 简单EchoServer示例\"></a>1. 简单EchoServer示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaocher.learning.server.javanio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Isaac Gao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2019/12/19</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Selector selector;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      selector = Selector.open();</span><br><span class=\"line\"><span class=\"comment\">//            We have to set connection host, port and non-blocking mode</span></span><br><span class=\"line\">      ServerSocketChannel socket = ServerSocketChannel.open();</span><br><span class=\"line\">      ServerSocket serverSocket = socket.socket();</span><br><span class=\"line\">      serverSocket.bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8089</span>));</span><br><span class=\"line\">      socket.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> ops = socket.validOps();</span><br><span class=\"line\">      SelectionKey register = socket.register(selector, ops, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        selector.select();</span><br><span class=\"line\">        Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class=\"line\">        Iterator&lt;SelectionKey&gt; i = selectedKeys.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i.hasNext()) &#123;</span><br><span class=\"line\">          SelectionKey key = i.next();</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                        New client has been accepted</span></span><br><span class=\"line\">            handleAccept(socket, key);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                        We can run non-blocking operation READ on our client</span></span><br><span class=\"line\">            String data = handleRead(key);</span><br><span class=\"line\">            handleWrite( data, (SocketChannel)key.channel());</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          i.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleAccept</span><span class=\"params\">(ServerSocketChannel mySocket,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      SelectionKey key)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Connection Accepted...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Accept the connection and set non-blocking mode</span></span><br><span class=\"line\">    SocketChannel client = mySocket.accept();</span><br><span class=\"line\">    client.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register that client is reading this channel</span></span><br><span class=\"line\">    client.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">handleRead</span><span class=\"params\">(SelectionKey key)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Reading...\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// create a ServerSocketChannel to read the request</span></span><br><span class=\"line\">    SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create buffer to read data</span></span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    client.read(buffer);</span><br><span class=\"line\"><span class=\"comment\">//        Parse data from buffer to String</span></span><br><span class=\"line\">    String data = <span class=\"keyword\">new</span> String(buffer.array()).trim();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Received message: \"</span> + data);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.equalsIgnoreCase(<span class=\"string\">\"exit\"</span>)) &#123;</span><br><span class=\"line\">        client.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Connection closed...\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleWrite</span><span class=\"params\">(String data, SocketChannel client)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = data.getBytes();</span><br><span class=\"line\">    ByteBuffer wrap = ByteBuffer.wrap(bytes);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      client.write(wrap);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-java-nio-核心概念\"><a href=\"#2-java-nio-核心概念\" class=\"headerlink\" title=\"2. java nio 核心概念\"></a>2. java nio 核心概念</h2><p>为了支持nio，java提供了一套抽象模型，即Selector、Channel、Buffer，除此之外，为了方便编程，还提供了一个组合体SelectionKey。</p>\n<ul>\n<li>Selector: 对多个Connection进行管理，负责对感兴趣的事件（interested ops）进行注册监听</li>\n<li>Channel：对Socket的抽象，即代表连接，读写操作都在此进行。</li>\n<li>Buffer：读写缓冲，用户态的内存用于与内核态的数据buffer进行交换。</li>\n<li>SelectionKey：用于表示一个Selector与Channel，重点是<strong>attach的对象，可以方便的用于与Channel相关的Context存储</strong>。</li>\n</ul>\n<p>具体关系如下：<br><img src=\"/images/java_nio_relation.png\" alt=\"Java Nio关系图\"></p>\n<p>一个channel为什么会有多个key？一个channel可被多个selector注册监听，所以需要用数组来保存keys。</p>\n<p>除了上面几个核心概念外，还有一个，就是ops，表示要关注的IO操作。</p>\n<p>虽然在关注的事件用Ops（Operation操作）来表示，但其实<strong>应该用事件event更贴切</strong>，其实Nio就是一个<strong>基于事件的网络模型</strong>。为了简化，Java将事件总共分为四种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final int OP_READ &#x3D; 1 &lt;&lt; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">public static final int OP_WRITE &#x3D; 1 &lt;&lt; 2;</span><br><span class=\"line\"></span><br><span class=\"line\">public static final int OP_CONNECT &#x3D; 1 &lt;&lt; 3;</span><br><span class=\"line\"></span><br><span class=\"line\">public static final int OP_ACCEPT &#x3D; 1 &lt;&lt; 4;</span><br></pre></td></tr></table></figure>\n<p>其中serversocketChannel只有Accept，另外三个属于普通的SocketChannel，为了方便，java通过Channel.validOps()硬编码了这个知识。</p>\n<h2 id=\"3-基本流程\"><a href=\"#3-基本流程\" class=\"headerlink\" title=\"3. 基本流程\"></a>3. 基本流程</h2><ol>\n<li><p>创建相关资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector &#x3D; Selector.open();</span><br><span class=\"line\">ServerSocketChannel socket &#x3D; ServerSocketChannel.open();</span><br><span class=\"line\">ServerSocket serverSocket &#x3D; socket.socket();</span><br><span class=\"line\">serverSocket.bind(new InetSocketAddress(&quot;localhost&quot;, 8089));</span><br><span class=\"line\">socket.configureBlocking(false);</span><br></pre></td></tr></table></figure></li>\n<li><p>注册channel到selector</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int ops &#x3D; socket.validOps();</span><br><span class=\"line\">SelectionKey register &#x3D; socket.register(selector, ops, null);</span><br></pre></td></tr></table></figure></li>\n<li><p>开启循环监听</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(true) &#123;</span><br><span class=\"line\">    selector.select(); &#x2F;&#x2F;若无事件产生，则阻塞</span><br><span class=\"line\">    Set&lt;SelectionKey&gt; selectedKeys &#x3D; selector.selectedKeys(); &#x2F;&#x2F;获取已经ready的SelectionKey</span><br><span class=\"line\">    &#x2F;&#x2F;... 进行读写、关闭等操作</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>处理事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SelectionKey key &#x3D; i.next();</span><br><span class=\"line\"></span><br><span class=\"line\">if (key.isAcceptable()) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; New client has been accepted</span><br><span class=\"line\">  handleAccept(socket, key);</span><br><span class=\"line\">&#125; else if (key.isReadable()) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; We can run non-blocking operation READ on our client</span><br><span class=\"line\">  String data &#x3D; handleRead(key);</span><br><span class=\"line\">  handleWrite( data, (SocketChannel)key.channel());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，这里写数据的时候并没有使用Nio，而是直接调用channel.write（Bio的方式）的方式来实现，因为写数据往往都是ready的，除非是缓冲区已满无法写入。所以对于写操作而言，用Bio方式更快一些。</p>\n</li>\n<li><p>删除事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator&lt;SelectionKey&gt; i &#x3D; selectedKeys.iterator();</span><br><span class=\"line\">&#x2F;&#x2F;...</span><br><span class=\"line\">i.remove();</span><br></pre></td></tr></table></figure>\n<p>Selector不会对selectedKeys做删除，当有事件触发后，则key会一直存在，所以需要手动删除。</p>\n</li>\n</ol>\n<h2 id=\"4-doSelect源码\"><a href=\"#4-doSelect源码\" class=\"headerlink\" title=\"4. doSelect源码\"></a>4. doSelect源码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">doSelect</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (closed)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClosedSelectorException();</span><br><span class=\"line\">    processDeregisterQueue();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        begin();</span><br><span class=\"line\">        pollWrapper.poll(timeout);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    processDeregisterQueue(); <span class=\"comment\">//对于需要cancel的key进行deregister</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> numKeysUpdated = updateSelectedKeys();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pollWrapper.interrupted()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Clear the wakeup pipe</span></span><br><span class=\"line\">        pollWrapper.putEventOps(pollWrapper.interruptedIndex(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (interruptLock) &#123;</span><br><span class=\"line\">            pollWrapper.clearInterrupted();</span><br><span class=\"line\">            IOUtil.drain(fd0);</span><br><span class=\"line\">            interruptTriggered = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numKeysUpdated;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">updateSelectedKeys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> entries = pollWrapper.updated;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numKeysUpdated = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;entries; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextFD = pollWrapper.getDescriptor(i);</span><br><span class=\"line\">        SelectionKeyImpl ski = fdToKey.get(Integer.valueOf(nextFD));</span><br><span class=\"line\">        <span class=\"comment\">// ski is null in the case of an interrupt</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ski != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rOps = pollWrapper.getEventOps(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (selectedKeys.contains(ski)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ski.channel.translateAndSetReadyOps(rOps, ski)) &#123;</span><br><span class=\"line\">                    numKeysUpdated++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ski.channel.translateAndSetReadyOps(rOps, ski);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((ski.nioReadyOps() &amp; ski.nioInterestOps()) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    selectedKeys.add(ski);</span><br><span class=\"line\">                    numKeysUpdated++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numKeysUpdated;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>processDeregisterQueue()</li>\n</ul>\n<p>有注册就有解注册，在主循环里，除了返回感兴趣的事件外，也要对不需要的key进行删除，例如channel已经关闭，则与该channel相关的key就需要删除，否则selector关注的key会越来越多，而导致性能变慢。</p>\n<ul>\n<li>updateSelectedKeys</li>\n</ul>\n<p>根据操作系统底层返回的描述符fd，利用fdToKey获取java层面的SelectionKey</p>\n<ul>\n<li>translateAndSetReadyOps</li>\n</ul>\n<p>将底层IO操作转义为java的Nio操作。由于Nio要支持多种协议，不单单只是tcp，所以要将其他IO操作转义为Java定义的4种IO操作。</p>\n<ul>\n<li>为什么需要ski.nioReadyOps() &amp; ski.nioInterestOps()进行对比</li>\n</ul>\n<p>因为write事件是一直ready的，若不和interestOps比较，会频繁触发该Key。</p>\n<h2 id=\"5-selector成员变量\"><a href=\"#5-selector成员变量\" class=\"headerlink\" title=\"5. selector成员变量\"></a>5. selector成员变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Set&lt;SelectionKey&gt; selectedKeys = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\"><span class=\"keyword\">protected</span> HashSet&lt;SelectionKey&gt; keys = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\"><span class=\"keyword\">private</span> Set&lt;SelectionKey&gt; publicKeys;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Set&lt;SelectionKey&gt; publicSelectedKeys;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">SelectorImpl</span><span class=\"params\">(SelectorProvider var1)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(var1);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.atBugLevel(<span class=\"string\">\"1.4\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.publicKeys = <span class=\"keyword\">this</span>.keys;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.publicSelectedKeys = <span class=\"keyword\">this</span>.selectedKeys;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.publicKeys = Collections.unmodifiableSet(<span class=\"keyword\">this</span>.keys);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.publicSelectedKeys = Util.ungrowableSet(<span class=\"keyword\">this</span>.selectedKeys);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>keys: 所有用户感兴趣的SelectionKey，每个channel只注册一个key到selector上，<strong>重复注册无效</strong></li>\n<li>selectedKeys: 监听到对应事件的keys而返回。<strong>selectedKeys不会做删除，当有事件触发后，则key会一直存在。所以需要手动删除。即需要selectedKeys.iterator().remove()</strong></li>\n<li>public*: 用户可访问的key，对原始的key进行不可修改或不可增长的封装</li>\n<li>selectedKeys.iterator().remove()：只是从selectedKeys列表里去除，并没有删除key本身，key本身仍然在channel里被引用，所以无需担心会重新创建而有影响。</li>\n</ul>\n<h1 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h1><p>本文只是初略的概括了Nio在java中的使用，但并未深入到在真实案例中的使用，例如nio在tomcat与netty下的具体实现，后续会继续展开描述，nio在tomcat与netty下的实战。除此以外，还有以下细节并未探索：</p>\n<ol>\n<li>LT模式 v.s. ET模式<ul>\n<li>LT模式 —— 如何利用de-register来优化selector监听</li>\n<li>ET模式时，Write事件会一直有吗？</li>\n</ul>\n</li>\n<li>de-register后，何时重新注册ops</li>\n<li>同样的端口，操作系统如何区分ServerSocket与普通socket。</li>\n<li>PollSelector初始化详细过程</li>\n<li>Buffer为什么需要flip（读写共用）</li>\n<li>如何知道connection已经断开</li>\n</ol>\n"},{"title":"dig与记录类型举例","date":"2019-12-29T15:09:02.000Z","_content":"本文介绍dig的常规使用，以及以`iqiyi.com`域名为例的dns记录类型举例。之所以用`iqiyi.com`为例，是因为本人在此公司任职:)。DNS记录类型介绍可以查看{% post_link dns-data-type-md DNS记录类型%}。\n# dig命令\n```\ndig [type] [@resolver-server] [+short] [+trace] target\n```\n- type指定记录类型如A、NS、MX等，具体可参考我之前的文章。默认查询为A记录。\n- @resolver-server指定域名解析的本地服务器，默认是网关，但也可以手动指定，如8.8.8.8google的通用域名解析器。\n- +short 简化应答形式，只显示ip结果\n- +trace 显示整个域名解析的迭代过程，从根域名到顶级域名到次级域名直到主机域名。\n\n# dig举例\n\n## dig查询\n执行命令：`dig iqiyi.com`，得到结果如下：\n```\n//第一段\n; <<>> DiG 9.10.6 <<>> iqiyi.com \n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 6831\n;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 0\n\n//第二段\n;; QUESTION SECTION:  \n;iqiyi.com.\t\t\tIN\tA\n\n//第三段\n;; ANSWER SECTION:    \niqiyi.com.\t\t350\tIN\tA\t101.227.188.172\niqiyi.com.\t\t350\tIN\tA\t101.227.188.170\niqiyi.com.\t\t350\tIN\tA\t101.227.188.174\niqiyi.com.\t\t350\tIN\tA\t101.227.188.176\niqiyi.com.\t\t350\tIN\tA\t101.227.188.178\n\n//第四段\n;; Query time: 7 msec  \n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 17:45:11 CST 2019\n;; MSG SIZE  rcvd: 107\n```\n* 结果说明\n    - 第一段 是查询命令说明以及结果统计信息展示\n    - 第二段 查询内容\n    - 第三段 查询结果内容，iqiyi.com的A记录有4个，350TTL（表明缓存时间是350s）。\n    - 第四段 DNS服务器信息，192.168.3.1#53是本地DNS服务器192.168.3.1（家里的网关ip），53是端口号，DNS服务的默认端口。107是收到结果的大小107个字节。\n\n## dig +short 简单查询\n```\n101.227.188.170\n101.227.188.174\n101.227.188.172\n101.227.188.176\n101.227.188.178\n```\n只返回查询结果的ip地址。\n\n## dig分级查询\n执行命令:`dig iqiyi.com +trace`,得到结果如下：\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com +trace\n;; global options: +cmd\n;; Received 28 bytes from 192.168.3.1#53(192.168.3.1) in 3 ms\n```\n发现什么都没有返回，应该是本地服务器192.168.3.1网关不支持trace的查询。\n\n所以改用8.8.8.8服务器来查询，命令：`dig iqiyi.com +trace @8.8.8.8`,结果如下:\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com +trace @8.8.8.8\n;; global options: +cmd\n//首次查询 根域名服务器查询 （查询本地服务器）\n.\t\t\t51069\tIN\tNS\tf.root-servers.net.\n.\t\t\t51069\tIN\tNS\th.root-servers.net.\n.\t\t\t51069\tIN\tNS\te.root-servers.net.\n.\t\t\t51069\tIN\tNS\tl.root-servers.net.\n.\t\t\t51069\tIN\tNS\tc.root-servers.net.\n.\t\t\t51069\tIN\tNS\tb.root-servers.net.\n.\t\t\t51069\tIN\tNS\tm.root-servers.net.\n.\t\t\t51069\tIN\tNS\ta.root-servers.net.\n.\t\t\t51069\tIN\tNS\td.root-servers.net.\n.\t\t\t51069\tIN\tNS\ti.root-servers.net.\n.\t\t\t51069\tIN\tNS\tk.root-servers.net.\n.\t\t\t51069\tIN\tNS\tj.root-servers.net.\n.\t\t\t51069\tIN\tNS\tg.root-servers.net.\n.\t\t\t51069\tIN\tRRSIG\tNS 8 0 518400 20200110170000 20191228160000 22545 . O+lE7aOii9IvLdYuWpMrTY0RkPpbc0yJLAhg/pwdxh8qZiACwS4TxuYo vxZrvoB0sJ7RyDgycViUEt++avEWx1JjzluiOXj1R0jqZQ7EXO+L+acP o88jV9F3Hqeuudj4u3ZZvM55eLnWfJaJzap/H3xi87rt5obw3zMd5QZE M2zQXSnrCiI2rSelaTeeHx6Mu+8yVigaAwRAH/8QdiAs2y2VuLbdl+C7 mHrbc3blraXSC6dzlGAEmryReOS5WOaMkSJZBctFbnX8KMmSdd83zBOv CVtdkPKGCwtUTWbbNZqrndYGqfCHf8NVLugz5R+jY3uzMvaQvdXBKwFT dcImog==\n;; Received 525 bytes from 8.8.8.8#53(8.8.8.8) in 41 ms\n\n//第一次迭代 顶级域名（TLD）查询 (查询根域名服务器)\ncom.\t\t\t172800\tIN\tNS\tl.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tb.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tc.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\td.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\te.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tf.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tg.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\ta.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\th.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\ti.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tj.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tk.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tm.gtld-servers.net.\ncom.\t\t\t86400\tIN\tDS\t30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766\ncom.\t\t\t86400\tIN\tRRSIG\tDS 8 1 86400 20200111050000 20191229040000 22545 . YT51a7sayHoEdZByf40buEQfUYzapxyvAwfPV12AwfWRh4crg9jIVcY6 V79GO4Yb+ezclS4ZTvT+WZ9yLdwuWnzAGVTD0fd9RLvK03nk45ZK42LP MNSHwwUOjv338vqcubwqNOyjxpEukQF3TPXgKAV/ltpGzQYmnDofCd+S uLAssjpag59wPWruFItrIvE6qD7xaDXv+oVsO/bTp7pVb7NOi+KOCpMI D8aP4xm+624JWxLZ59YXOLOy3q1YVfLiVCe4ghtJS4/6BIuRhQ3CAOmj w4QfJVrTDnyn/RY3z41BnRT8K6CkUyuDc5Nc4NlU5KX3HxdiphW1w6JM oWNrPQ==\n;; Received 1169 bytes from 192.203.230.10#53(e.root-servers.net) in 170 ms\n\n//第二次迭代 次级域名查询（查询TLD）\niqiyi.com.\t\t172800\tIN\tNS\tns1.iqiyi.com.\niqiyi.com.\t\t172800\tIN\tNS\tns2.iqiyi.com.\niqiyi.com.\t\t172800\tIN\tNS\tns3.iqiyi.com.\niqiyi.com.\t\t172800\tIN\tNS\tns4.iqiyi.com.\nCK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN NSEC3 1 1 0 - CK0Q1GIN43N1ARRC9OSM6QPQR81H5M9A  NS SOA RRSIG DNSKEY NSEC3PARAM\nCK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN RRSIG NSEC3 8 2 86400 20200102054825 20191226043825 12163 com. J8V3FpilA7JdIt7GBym3CCORYjgGlHAazZlLNBiJ0bFa92n4PrX0hPYo oUHtAA4lEaw9eSJjOIVXhnKq9AR7EgQFfMxcT8OvbBVJ4eErF1vBjd1B x4EkZM2IHIVPPv8XlziufAhiSVMnYHcZnuO8BpDaXrasvlW3U9vv/VQU dCs79XwjQR/XkFvJKvldj2EZd3FXLlRDdnwESxhlpLZmIg==\nCDJHMJ049AHN95A56GE5FPTIT6CK3TVA.com. 86400 IN NSEC3 1 1 0 - CDJIFERNDE19197KLS7DLE5N5008MQB2  NS DS RRSIG\nCDJHMJ049AHN95A56GE5FPTIT6CK3TVA.com. 86400 IN RRSIG NSEC3 8 2 86400 20200103053214 20191227042214 12163 com. LQOPbhYOUqtzkl49A0Sg7IVpJ8HVep5FwE5ILJ0cK/5uGsvKk1bbrM4A s0M5iiaVnQ0BwTt9FRNdYRGUVUL6YSJATaouDomYj3o/h+0kGxvrJxnF jRuDsQS56c6LDALzd+2Hv4xwiOURhv0Nl4v3rycokglC6IjN1VpGrgWN bldR9ixluPAQsBo+m3TdieQyb4zc10Ks3BAJg4UKmNQSLg==\n;; Received 723 bytes from 192.26.92.30#53(c.gtld-servers.net) in 171 ms\n\n//第三次迭代  主机域名查询 （查询权威域名服务器）\niqiyi.com.\t\t600\tIN\tA\t101.227.188.172\niqiyi.com.\t\t600\tIN\tA\t101.227.188.174\niqiyi.com.\t\t600\tIN\tA\t101.227.188.176\niqiyi.com.\t\t600\tIN\tA\t101.227.188.178\niqiyi.com.\t\t600\tIN\tA\t101.227.188.170\n;; Received 118 bytes from 43.225.84.1#53(ns3.iqiyi.com) in 28 ms\n```\n根据每次迭代返回结果的服务器信息，我们可以发现DNS查询整体流程是这样的：\n\n{% asset_img DNS_Query_Flow.png This is an image %}\n\n- 首次查询 从本地服务器（local dns server）获取根域名服务器地址，然后由**本地服务器**开始迭代dns查询过程。\n- 第一次迭代 由本地服务器访问根域名服务器，根域名服务器返回关于顶级域名`.com`的NS记录。\n- 第二次迭代 由本地服务器访问上一步获得的`.com`地址的顶级域名服务器，并从中获得关于`iqiyi.com`的NS记录。\n- 第三次迭代 由本地服务器访问由上一步获得的`iqiyi.com`NS的服务器地址，即`iqiyi.com`的权威服务器，然后获得iqiyi.com的A记录。\n- 最终，本地服务器返回关于`iqiyi.com`的IP地址给客户端，然后客户端再访问目标服务器。\n\n# 记录类型举例\n1. SOA记录 `dig iqiyi.com soa`\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com soa\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 20850\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;iqiyi.com.\t\t\tIN\tSOA\n\n;; ANSWER SECTION:\niqiyi.com.\t\t86400\tIN\tSOA\tns1.iqiyi.com. dnsadmin.iqiyi.com. 2019122905 1800 600 1209600 600\n\n;; Query time: 33 msec\n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 22:46:03 CST 2019\n;; MSG SIZE  rcvd: 87\n```\n2. NS记录 `dig iqiyi.com ns`\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com ns\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 21342\n;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;iqiyi.com.\t\t\tIN\tNS\n\n;; ANSWER SECTION:\niqiyi.com.\t\t1132\tIN\tNS\tns2.iqiyi.com.\niqiyi.com.\t\t1132\tIN\tNS\tns3.iqiyi.com.\niqiyi.com.\t\t1132\tIN\tNS\tns4.iqiyi.com.\niqiyi.com.\t\t1132\tIN\tNS\tns1.iqiyi.com.\n\n;; Query time: 11 msec\n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 22:47:10 CST 2019\n;; MSG SIZE  rcvd: 110\n```\n3. ns3.iqiyi.com的A记录 `dig ns3.iqiyi.com`\n```\n; <<>> DiG 9.10.6 <<>> ns3.iqiyi.com\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 11375\n;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;ns3.iqiyi.com.\t\t\tIN\tA\n\n;; ANSWER SECTION:\nns3.iqiyi.com.\t\t296\tIN\tA\t43.225.84.1\n\n;; Query time: 51 msec\n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 22:49:07 CST 2019\n;; MSG SIZE  rcvd: 47\n```\n4. MX记录 `dig iqiyi.com mx`\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com mx\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 16303\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;iqiyi.com.\t\t\tIN\tMX\n\n;; ANSWER SECTION:\niqiyi.com.\t\t300\tIN\tMX\t10 mx1.iqiyi.com.\n\n;; Query time: 9 msec\n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 22:50:26 CST 2019\n;; MSG SIZE  rcvd: 47\n```\n5. TXT记录 `dig iqiyi.com txt`\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com txt\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 28756\n;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;iqiyi.com.\t\t\tIN\tTXT\n\n;; ANSWER SECTION:\niqiyi.com.\t\t600\tIN\tTXT\t\"92qpmvb8qgzqbvndvbgtrn9nlys14bxh\"\niqiyi.com.\t\t600\tIN\tTXT\t\"v=spf1 ip4:202.108.14.100 a mx ~all\"\n\n;; Query time: 64 msec\n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 22:51:45 CST 2019\n;; MSG SIZE  rcvd: 131\n```\n6. SRV、PTR\nSRV与PRT不常用，所以iqiyi.com的域名服务器并没有配置这两项。\n\n# 参考\n[DNS 原理入门](https://www.ruanyifeng.com/blog/2016/06/dns.html)","source":"_posts/dig-and-dns-record-type.md","raw":"---\ntitle: dig与记录类型举例\ndate: 2019-12-29 23:09:02\ntags:\ncategories: \n    - 网络\n    - DNS\n---\n本文介绍dig的常规使用，以及以`iqiyi.com`域名为例的dns记录类型举例。之所以用`iqiyi.com`为例，是因为本人在此公司任职:)。DNS记录类型介绍可以查看{% post_link dns-data-type-md DNS记录类型%}。\n# dig命令\n```\ndig [type] [@resolver-server] [+short] [+trace] target\n```\n- type指定记录类型如A、NS、MX等，具体可参考我之前的文章。默认查询为A记录。\n- @resolver-server指定域名解析的本地服务器，默认是网关，但也可以手动指定，如8.8.8.8google的通用域名解析器。\n- +short 简化应答形式，只显示ip结果\n- +trace 显示整个域名解析的迭代过程，从根域名到顶级域名到次级域名直到主机域名。\n\n# dig举例\n\n## dig查询\n执行命令：`dig iqiyi.com`，得到结果如下：\n```\n//第一段\n; <<>> DiG 9.10.6 <<>> iqiyi.com \n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 6831\n;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 0\n\n//第二段\n;; QUESTION SECTION:  \n;iqiyi.com.\t\t\tIN\tA\n\n//第三段\n;; ANSWER SECTION:    \niqiyi.com.\t\t350\tIN\tA\t101.227.188.172\niqiyi.com.\t\t350\tIN\tA\t101.227.188.170\niqiyi.com.\t\t350\tIN\tA\t101.227.188.174\niqiyi.com.\t\t350\tIN\tA\t101.227.188.176\niqiyi.com.\t\t350\tIN\tA\t101.227.188.178\n\n//第四段\n;; Query time: 7 msec  \n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 17:45:11 CST 2019\n;; MSG SIZE  rcvd: 107\n```\n* 结果说明\n    - 第一段 是查询命令说明以及结果统计信息展示\n    - 第二段 查询内容\n    - 第三段 查询结果内容，iqiyi.com的A记录有4个，350TTL（表明缓存时间是350s）。\n    - 第四段 DNS服务器信息，192.168.3.1#53是本地DNS服务器192.168.3.1（家里的网关ip），53是端口号，DNS服务的默认端口。107是收到结果的大小107个字节。\n\n## dig +short 简单查询\n```\n101.227.188.170\n101.227.188.174\n101.227.188.172\n101.227.188.176\n101.227.188.178\n```\n只返回查询结果的ip地址。\n\n## dig分级查询\n执行命令:`dig iqiyi.com +trace`,得到结果如下：\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com +trace\n;; global options: +cmd\n;; Received 28 bytes from 192.168.3.1#53(192.168.3.1) in 3 ms\n```\n发现什么都没有返回，应该是本地服务器192.168.3.1网关不支持trace的查询。\n\n所以改用8.8.8.8服务器来查询，命令：`dig iqiyi.com +trace @8.8.8.8`,结果如下:\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com +trace @8.8.8.8\n;; global options: +cmd\n//首次查询 根域名服务器查询 （查询本地服务器）\n.\t\t\t51069\tIN\tNS\tf.root-servers.net.\n.\t\t\t51069\tIN\tNS\th.root-servers.net.\n.\t\t\t51069\tIN\tNS\te.root-servers.net.\n.\t\t\t51069\tIN\tNS\tl.root-servers.net.\n.\t\t\t51069\tIN\tNS\tc.root-servers.net.\n.\t\t\t51069\tIN\tNS\tb.root-servers.net.\n.\t\t\t51069\tIN\tNS\tm.root-servers.net.\n.\t\t\t51069\tIN\tNS\ta.root-servers.net.\n.\t\t\t51069\tIN\tNS\td.root-servers.net.\n.\t\t\t51069\tIN\tNS\ti.root-servers.net.\n.\t\t\t51069\tIN\tNS\tk.root-servers.net.\n.\t\t\t51069\tIN\tNS\tj.root-servers.net.\n.\t\t\t51069\tIN\tNS\tg.root-servers.net.\n.\t\t\t51069\tIN\tRRSIG\tNS 8 0 518400 20200110170000 20191228160000 22545 . O+lE7aOii9IvLdYuWpMrTY0RkPpbc0yJLAhg/pwdxh8qZiACwS4TxuYo vxZrvoB0sJ7RyDgycViUEt++avEWx1JjzluiOXj1R0jqZQ7EXO+L+acP o88jV9F3Hqeuudj4u3ZZvM55eLnWfJaJzap/H3xi87rt5obw3zMd5QZE M2zQXSnrCiI2rSelaTeeHx6Mu+8yVigaAwRAH/8QdiAs2y2VuLbdl+C7 mHrbc3blraXSC6dzlGAEmryReOS5WOaMkSJZBctFbnX8KMmSdd83zBOv CVtdkPKGCwtUTWbbNZqrndYGqfCHf8NVLugz5R+jY3uzMvaQvdXBKwFT dcImog==\n;; Received 525 bytes from 8.8.8.8#53(8.8.8.8) in 41 ms\n\n//第一次迭代 顶级域名（TLD）查询 (查询根域名服务器)\ncom.\t\t\t172800\tIN\tNS\tl.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tb.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tc.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\td.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\te.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tf.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tg.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\ta.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\th.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\ti.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tj.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tk.gtld-servers.net.\ncom.\t\t\t172800\tIN\tNS\tm.gtld-servers.net.\ncom.\t\t\t86400\tIN\tDS\t30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766\ncom.\t\t\t86400\tIN\tRRSIG\tDS 8 1 86400 20200111050000 20191229040000 22545 . YT51a7sayHoEdZByf40buEQfUYzapxyvAwfPV12AwfWRh4crg9jIVcY6 V79GO4Yb+ezclS4ZTvT+WZ9yLdwuWnzAGVTD0fd9RLvK03nk45ZK42LP MNSHwwUOjv338vqcubwqNOyjxpEukQF3TPXgKAV/ltpGzQYmnDofCd+S uLAssjpag59wPWruFItrIvE6qD7xaDXv+oVsO/bTp7pVb7NOi+KOCpMI D8aP4xm+624JWxLZ59YXOLOy3q1YVfLiVCe4ghtJS4/6BIuRhQ3CAOmj w4QfJVrTDnyn/RY3z41BnRT8K6CkUyuDc5Nc4NlU5KX3HxdiphW1w6JM oWNrPQ==\n;; Received 1169 bytes from 192.203.230.10#53(e.root-servers.net) in 170 ms\n\n//第二次迭代 次级域名查询（查询TLD）\niqiyi.com.\t\t172800\tIN\tNS\tns1.iqiyi.com.\niqiyi.com.\t\t172800\tIN\tNS\tns2.iqiyi.com.\niqiyi.com.\t\t172800\tIN\tNS\tns3.iqiyi.com.\niqiyi.com.\t\t172800\tIN\tNS\tns4.iqiyi.com.\nCK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN NSEC3 1 1 0 - CK0Q1GIN43N1ARRC9OSM6QPQR81H5M9A  NS SOA RRSIG DNSKEY NSEC3PARAM\nCK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN RRSIG NSEC3 8 2 86400 20200102054825 20191226043825 12163 com. J8V3FpilA7JdIt7GBym3CCORYjgGlHAazZlLNBiJ0bFa92n4PrX0hPYo oUHtAA4lEaw9eSJjOIVXhnKq9AR7EgQFfMxcT8OvbBVJ4eErF1vBjd1B x4EkZM2IHIVPPv8XlziufAhiSVMnYHcZnuO8BpDaXrasvlW3U9vv/VQU dCs79XwjQR/XkFvJKvldj2EZd3FXLlRDdnwESxhlpLZmIg==\nCDJHMJ049AHN95A56GE5FPTIT6CK3TVA.com. 86400 IN NSEC3 1 1 0 - CDJIFERNDE19197KLS7DLE5N5008MQB2  NS DS RRSIG\nCDJHMJ049AHN95A56GE5FPTIT6CK3TVA.com. 86400 IN RRSIG NSEC3 8 2 86400 20200103053214 20191227042214 12163 com. LQOPbhYOUqtzkl49A0Sg7IVpJ8HVep5FwE5ILJ0cK/5uGsvKk1bbrM4A s0M5iiaVnQ0BwTt9FRNdYRGUVUL6YSJATaouDomYj3o/h+0kGxvrJxnF jRuDsQS56c6LDALzd+2Hv4xwiOURhv0Nl4v3rycokglC6IjN1VpGrgWN bldR9ixluPAQsBo+m3TdieQyb4zc10Ks3BAJg4UKmNQSLg==\n;; Received 723 bytes from 192.26.92.30#53(c.gtld-servers.net) in 171 ms\n\n//第三次迭代  主机域名查询 （查询权威域名服务器）\niqiyi.com.\t\t600\tIN\tA\t101.227.188.172\niqiyi.com.\t\t600\tIN\tA\t101.227.188.174\niqiyi.com.\t\t600\tIN\tA\t101.227.188.176\niqiyi.com.\t\t600\tIN\tA\t101.227.188.178\niqiyi.com.\t\t600\tIN\tA\t101.227.188.170\n;; Received 118 bytes from 43.225.84.1#53(ns3.iqiyi.com) in 28 ms\n```\n根据每次迭代返回结果的服务器信息，我们可以发现DNS查询整体流程是这样的：\n\n{% asset_img DNS_Query_Flow.png This is an image %}\n\n- 首次查询 从本地服务器（local dns server）获取根域名服务器地址，然后由**本地服务器**开始迭代dns查询过程。\n- 第一次迭代 由本地服务器访问根域名服务器，根域名服务器返回关于顶级域名`.com`的NS记录。\n- 第二次迭代 由本地服务器访问上一步获得的`.com`地址的顶级域名服务器，并从中获得关于`iqiyi.com`的NS记录。\n- 第三次迭代 由本地服务器访问由上一步获得的`iqiyi.com`NS的服务器地址，即`iqiyi.com`的权威服务器，然后获得iqiyi.com的A记录。\n- 最终，本地服务器返回关于`iqiyi.com`的IP地址给客户端，然后客户端再访问目标服务器。\n\n# 记录类型举例\n1. SOA记录 `dig iqiyi.com soa`\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com soa\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 20850\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;iqiyi.com.\t\t\tIN\tSOA\n\n;; ANSWER SECTION:\niqiyi.com.\t\t86400\tIN\tSOA\tns1.iqiyi.com. dnsadmin.iqiyi.com. 2019122905 1800 600 1209600 600\n\n;; Query time: 33 msec\n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 22:46:03 CST 2019\n;; MSG SIZE  rcvd: 87\n```\n2. NS记录 `dig iqiyi.com ns`\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com ns\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 21342\n;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;iqiyi.com.\t\t\tIN\tNS\n\n;; ANSWER SECTION:\niqiyi.com.\t\t1132\tIN\tNS\tns2.iqiyi.com.\niqiyi.com.\t\t1132\tIN\tNS\tns3.iqiyi.com.\niqiyi.com.\t\t1132\tIN\tNS\tns4.iqiyi.com.\niqiyi.com.\t\t1132\tIN\tNS\tns1.iqiyi.com.\n\n;; Query time: 11 msec\n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 22:47:10 CST 2019\n;; MSG SIZE  rcvd: 110\n```\n3. ns3.iqiyi.com的A记录 `dig ns3.iqiyi.com`\n```\n; <<>> DiG 9.10.6 <<>> ns3.iqiyi.com\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 11375\n;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;ns3.iqiyi.com.\t\t\tIN\tA\n\n;; ANSWER SECTION:\nns3.iqiyi.com.\t\t296\tIN\tA\t43.225.84.1\n\n;; Query time: 51 msec\n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 22:49:07 CST 2019\n;; MSG SIZE  rcvd: 47\n```\n4. MX记录 `dig iqiyi.com mx`\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com mx\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 16303\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;iqiyi.com.\t\t\tIN\tMX\n\n;; ANSWER SECTION:\niqiyi.com.\t\t300\tIN\tMX\t10 mx1.iqiyi.com.\n\n;; Query time: 9 msec\n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 22:50:26 CST 2019\n;; MSG SIZE  rcvd: 47\n```\n5. TXT记录 `dig iqiyi.com txt`\n```\n; <<>> DiG 9.10.6 <<>> iqiyi.com txt\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 28756\n;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;iqiyi.com.\t\t\tIN\tTXT\n\n;; ANSWER SECTION:\niqiyi.com.\t\t600\tIN\tTXT\t\"92qpmvb8qgzqbvndvbgtrn9nlys14bxh\"\niqiyi.com.\t\t600\tIN\tTXT\t\"v=spf1 ip4:202.108.14.100 a mx ~all\"\n\n;; Query time: 64 msec\n;; SERVER: 192.168.3.1#53(192.168.3.1)\n;; WHEN: Sun Dec 29 22:51:45 CST 2019\n;; MSG SIZE  rcvd: 131\n```\n6. SRV、PTR\nSRV与PRT不常用，所以iqiyi.com的域名服务器并没有配置这两项。\n\n# 参考\n[DNS 原理入门](https://www.ruanyifeng.com/blog/2016/06/dns.html)","slug":"dig-and-dns-record-type","published":1,"updated":"2019-12-29T16:13:16.549Z","_id":"ck4r6b9ro0002317a6mn8eki1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文介绍dig的常规使用，以及以<code>iqiyi.com</code>域名为例的dns记录类型举例。之所以用<code>iqiyi.com</code>为例，是因为本人在此公司任职:)。DNS记录类型介绍可以查看<a href=\"/2019/12/29/dns-data-type-md/\" title=\"DNS记录类型\">DNS记录类型</a>。</p>\n<h1 id=\"dig命令\"><a href=\"#dig命令\" class=\"headerlink\" title=\"dig命令\"></a>dig命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dig [type] [@resolver-server] [+short] [+trace] target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>type指定记录类型如A、NS、MX等，具体可参考我之前的文章。默认查询为A记录。</li>\n<li>@resolver-server指定域名解析的本地服务器，默认是网关，但也可以手动指定，如8.8.8.8google的通用域名解析器。</li>\n<li>+short 简化应答形式，只显示ip结果</li>\n<li>+trace 显示整个域名解析的迭代过程，从根域名到顶级域名到次级域名直到主机域名。</li>\n</ul>\n<h1 id=\"dig举例\"><a href=\"#dig举例\" class=\"headerlink\" title=\"dig举例\"></a>dig举例</h1><h2 id=\"dig查询\"><a href=\"#dig查询\" class=\"headerlink\" title=\"dig查询\"></a>dig查询</h2><p>执行命令：<code>dig iqiyi.com</code>，得到结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;第一段</span><br><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com </span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 6831</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第二段</span><br><span class=\"line\">;; QUESTION SECTION:  </span><br><span class=\"line\">;iqiyi.com.\t\t\tIN\tA</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第三段</span><br><span class=\"line\">;; ANSWER SECTION:    </span><br><span class=\"line\">iqiyi.com.\t\t350\tIN\tA\t101.227.188.172</span><br><span class=\"line\">iqiyi.com.\t\t350\tIN\tA\t101.227.188.170</span><br><span class=\"line\">iqiyi.com.\t\t350\tIN\tA\t101.227.188.174</span><br><span class=\"line\">iqiyi.com.\t\t350\tIN\tA\t101.227.188.176</span><br><span class=\"line\">iqiyi.com.\t\t350\tIN\tA\t101.227.188.178</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第四段</span><br><span class=\"line\">;; Query time: 7 msec  </span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 17:45:11 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 107</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果说明<ul>\n<li>第一段 是查询命令说明以及结果统计信息展示</li>\n<li>第二段 查询内容</li>\n<li>第三段 查询结果内容，iqiyi.com的A记录有4个，350TTL（表明缓存时间是350s）。</li>\n<li>第四段 DNS服务器信息，192.168.3.1#53是本地DNS服务器192.168.3.1（家里的网关ip），53是端口号，DNS服务的默认端口。107是收到结果的大小107个字节。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"dig-short-简单查询\"><a href=\"#dig-short-简单查询\" class=\"headerlink\" title=\"dig +short 简单查询\"></a>dig +short 简单查询</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">101.227.188.170</span><br><span class=\"line\">101.227.188.174</span><br><span class=\"line\">101.227.188.172</span><br><span class=\"line\">101.227.188.176</span><br><span class=\"line\">101.227.188.178</span><br></pre></td></tr></table></figure>\n<p>只返回查询结果的ip地址。</p>\n<h2 id=\"dig分级查询\"><a href=\"#dig分级查询\" class=\"headerlink\" title=\"dig分级查询\"></a>dig分级查询</h2><p>执行命令:<code>dig iqiyi.com +trace</code>,得到结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com +trace</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Received 28 bytes from 192.168.3.1#53(192.168.3.1) in 3 ms</span><br></pre></td></tr></table></figure>\n<p>发现什么都没有返回，应该是本地服务器192.168.3.1网关不支持trace的查询。</p>\n<p>所以改用8.8.8.8服务器来查询，命令：<code>dig iqiyi.com +trace @8.8.8.8</code>,结果如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com +trace @8.8.8.8</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">&#x2F;&#x2F;首次查询 根域名服务器查询 （查询本地服务器）</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tf.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\th.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\te.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tl.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tc.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tb.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tm.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\ta.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\td.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\ti.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tk.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tj.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tg.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tRRSIG\tNS 8 0 518400 20200110170000 20191228160000 22545 . O+lE7aOii9IvLdYuWpMrTY0RkPpbc0yJLAhg&#x2F;pwdxh8qZiACwS4TxuYo vxZrvoB0sJ7RyDgycViUEt++avEWx1JjzluiOXj1R0jqZQ7EXO+L+acP o88jV9F3Hqeuudj4u3ZZvM55eLnWfJaJzap&#x2F;H3xi87rt5obw3zMd5QZE M2zQXSnrCiI2rSelaTeeHx6Mu+8yVigaAwRAH&#x2F;8QdiAs2y2VuLbdl+C7 mHrbc3blraXSC6dzlGAEmryReOS5WOaMkSJZBctFbnX8KMmSdd83zBOv CVtdkPKGCwtUTWbbNZqrndYGqfCHf8NVLugz5R+jY3uzMvaQvdXBKwFT dcImog&#x3D;&#x3D;</span><br><span class=\"line\">;; Received 525 bytes from 8.8.8.8#53(8.8.8.8) in 41 ms</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第一次迭代 顶级域名（TLD）查询 (查询根域名服务器)</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tl.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tb.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tc.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\td.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\te.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tf.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tg.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\ta.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\th.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\ti.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tj.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tk.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tm.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t86400\tIN\tDS\t30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766</span><br><span class=\"line\">com.\t\t\t86400\tIN\tRRSIG\tDS 8 1 86400 20200111050000 20191229040000 22545 . YT51a7sayHoEdZByf40buEQfUYzapxyvAwfPV12AwfWRh4crg9jIVcY6 V79GO4Yb+ezclS4ZTvT+WZ9yLdwuWnzAGVTD0fd9RLvK03nk45ZK42LP MNSHwwUOjv338vqcubwqNOyjxpEukQF3TPXgKAV&#x2F;ltpGzQYmnDofCd+S uLAssjpag59wPWruFItrIvE6qD7xaDXv+oVsO&#x2F;bTp7pVb7NOi+KOCpMI D8aP4xm+624JWxLZ59YXOLOy3q1YVfLiVCe4ghtJS4&#x2F;6BIuRhQ3CAOmj w4QfJVrTDnyn&#x2F;RY3z41BnRT8K6CkUyuDc5Nc4NlU5KX3HxdiphW1w6JM oWNrPQ&#x3D;&#x3D;</span><br><span class=\"line\">;; Received 1169 bytes from 192.203.230.10#53(e.root-servers.net) in 170 ms</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第二次迭代 次级域名查询（查询TLD）</span><br><span class=\"line\">iqiyi.com.\t\t172800\tIN\tNS\tns1.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t172800\tIN\tNS\tns2.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t172800\tIN\tNS\tns3.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t172800\tIN\tNS\tns4.iqiyi.com.</span><br><span class=\"line\">CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN NSEC3 1 1 0 - CK0Q1GIN43N1ARRC9OSM6QPQR81H5M9A  NS SOA RRSIG DNSKEY NSEC3PARAM</span><br><span class=\"line\">CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN RRSIG NSEC3 8 2 86400 20200102054825 20191226043825 12163 com. J8V3FpilA7JdIt7GBym3CCORYjgGlHAazZlLNBiJ0bFa92n4PrX0hPYo oUHtAA4lEaw9eSJjOIVXhnKq9AR7EgQFfMxcT8OvbBVJ4eErF1vBjd1B x4EkZM2IHIVPPv8XlziufAhiSVMnYHcZnuO8BpDaXrasvlW3U9vv&#x2F;VQU dCs79XwjQR&#x2F;XkFvJKvldj2EZd3FXLlRDdnwESxhlpLZmIg&#x3D;&#x3D;</span><br><span class=\"line\">CDJHMJ049AHN95A56GE5FPTIT6CK3TVA.com. 86400 IN NSEC3 1 1 0 - CDJIFERNDE19197KLS7DLE5N5008MQB2  NS DS RRSIG</span><br><span class=\"line\">CDJHMJ049AHN95A56GE5FPTIT6CK3TVA.com. 86400 IN RRSIG NSEC3 8 2 86400 20200103053214 20191227042214 12163 com. LQOPbhYOUqtzkl49A0Sg7IVpJ8HVep5FwE5ILJ0cK&#x2F;5uGsvKk1bbrM4A s0M5iiaVnQ0BwTt9FRNdYRGUVUL6YSJATaouDomYj3o&#x2F;h+0kGxvrJxnF jRuDsQS56c6LDALzd+2Hv4xwiOURhv0Nl4v3rycokglC6IjN1VpGrgWN bldR9ixluPAQsBo+m3TdieQyb4zc10Ks3BAJg4UKmNQSLg&#x3D;&#x3D;</span><br><span class=\"line\">;; Received 723 bytes from 192.26.92.30#53(c.gtld-servers.net) in 171 ms</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第三次迭代  主机域名查询 （查询权威域名服务器）</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tA\t101.227.188.172</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tA\t101.227.188.174</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tA\t101.227.188.176</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tA\t101.227.188.178</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tA\t101.227.188.170</span><br><span class=\"line\">;; Received 118 bytes from 43.225.84.1#53(ns3.iqiyi.com) in 28 ms</span><br></pre></td></tr></table></figure>\n<p>根据每次迭代返回结果的服务器信息，我们可以发现DNS查询整体流程是这样的：</p>\n<img src=\"/2019/12/29/dig-and-dns-record-type/DNS_Query_Flow.png\" class=\"\" title=\"This is an image\">\n\n<ul>\n<li>首次查询 从本地服务器（local dns server）获取根域名服务器地址，然后由<strong>本地服务器</strong>开始迭代dns查询过程。</li>\n<li>第一次迭代 由本地服务器访问根域名服务器，根域名服务器返回关于顶级域名<code>.com</code>的NS记录。</li>\n<li>第二次迭代 由本地服务器访问上一步获得的<code>.com</code>地址的顶级域名服务器，并从中获得关于<code>iqiyi.com</code>的NS记录。</li>\n<li>第三次迭代 由本地服务器访问由上一步获得的<code>iqiyi.com</code>NS的服务器地址，即<code>iqiyi.com</code>的权威服务器，然后获得iqiyi.com的A记录。</li>\n<li>最终，本地服务器返回关于<code>iqiyi.com</code>的IP地址给客户端，然后客户端再访问目标服务器。</li>\n</ul>\n<h1 id=\"记录类型举例\"><a href=\"#记录类型举例\" class=\"headerlink\" title=\"记录类型举例\"></a>记录类型举例</h1><ol>\n<li>SOA记录 <code>dig iqiyi.com soa</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com soa</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 20850</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class=\"line\"></span><br><span class=\"line\">;; OPT PSEUDOSECTION:</span><br><span class=\"line\">; EDNS: version: 0, flags:; udp: 4096</span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;iqiyi.com.\t\t\tIN\tSOA</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">iqiyi.com.\t\t86400\tIN\tSOA\tns1.iqiyi.com. dnsadmin.iqiyi.com. 2019122905 1800 600 1209600 600</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 33 msec</span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 22:46:03 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 87</span><br></pre></td></tr></table></figure></li>\n<li>NS记录 <code>dig iqiyi.com ns</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com ns</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 21342</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class=\"line\"></span><br><span class=\"line\">;; OPT PSEUDOSECTION:</span><br><span class=\"line\">; EDNS: version: 0, flags:; udp: 4096</span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;iqiyi.com.\t\t\tIN\tNS</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">iqiyi.com.\t\t1132\tIN\tNS\tns2.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t1132\tIN\tNS\tns3.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t1132\tIN\tNS\tns4.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t1132\tIN\tNS\tns1.iqiyi.com.</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 11 msec</span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 22:47:10 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 110</span><br></pre></td></tr></table></figure></li>\n<li>ns3.iqiyi.com的A记录 <code>dig ns3.iqiyi.com</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; ns3.iqiyi.com</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 11375</span><br><span class=\"line\">;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class=\"line\"></span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;ns3.iqiyi.com.\t\t\tIN\tA</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">ns3.iqiyi.com.\t\t296\tIN\tA\t43.225.84.1</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 51 msec</span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 22:49:07 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 47</span><br></pre></td></tr></table></figure></li>\n<li>MX记录 <code>dig iqiyi.com mx</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com mx</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 16303</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class=\"line\"></span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;iqiyi.com.\t\t\tIN\tMX</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">iqiyi.com.\t\t300\tIN\tMX\t10 mx1.iqiyi.com.</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 9 msec</span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 22:50:26 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 47</span><br></pre></td></tr></table></figure></li>\n<li>TXT记录 <code>dig iqiyi.com txt</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com txt</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 28756</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class=\"line\"></span><br><span class=\"line\">;; OPT PSEUDOSECTION:</span><br><span class=\"line\">; EDNS: version: 0, flags:; udp: 4096</span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;iqiyi.com.\t\t\tIN\tTXT</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tTXT\t&quot;92qpmvb8qgzqbvndvbgtrn9nlys14bxh&quot;</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tTXT\t&quot;v&#x3D;spf1 ip4:202.108.14.100 a mx ~all&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 64 msec</span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 22:51:45 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 131</span><br></pre></td></tr></table></figure></li>\n<li>SRV、PTR<br>SRV与PRT不常用，所以iqiyi.com的域名服务器并没有配置这两项。</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.ruanyifeng.com/blog/2016/06/dns.html\" target=\"_blank\" rel=\"noopener\">DNS 原理入门</a></p>\n","site":{"data":{}},"length":7901,"excerpt":"","more":"<p>本文介绍dig的常规使用，以及以<code>iqiyi.com</code>域名为例的dns记录类型举例。之所以用<code>iqiyi.com</code>为例，是因为本人在此公司任职:)。DNS记录类型介绍可以查看<a href=\"/2019/12/29/dns-data-type-md/\" title=\"DNS记录类型\">DNS记录类型</a>。</p>\n<h1 id=\"dig命令\"><a href=\"#dig命令\" class=\"headerlink\" title=\"dig命令\"></a>dig命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dig [type] [@resolver-server] [+short] [+trace] target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>type指定记录类型如A、NS、MX等，具体可参考我之前的文章。默认查询为A记录。</li>\n<li>@resolver-server指定域名解析的本地服务器，默认是网关，但也可以手动指定，如8.8.8.8google的通用域名解析器。</li>\n<li>+short 简化应答形式，只显示ip结果</li>\n<li>+trace 显示整个域名解析的迭代过程，从根域名到顶级域名到次级域名直到主机域名。</li>\n</ul>\n<h1 id=\"dig举例\"><a href=\"#dig举例\" class=\"headerlink\" title=\"dig举例\"></a>dig举例</h1><h2 id=\"dig查询\"><a href=\"#dig查询\" class=\"headerlink\" title=\"dig查询\"></a>dig查询</h2><p>执行命令：<code>dig iqiyi.com</code>，得到结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;第一段</span><br><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com </span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 6831</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第二段</span><br><span class=\"line\">;; QUESTION SECTION:  </span><br><span class=\"line\">;iqiyi.com.\t\t\tIN\tA</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第三段</span><br><span class=\"line\">;; ANSWER SECTION:    </span><br><span class=\"line\">iqiyi.com.\t\t350\tIN\tA\t101.227.188.172</span><br><span class=\"line\">iqiyi.com.\t\t350\tIN\tA\t101.227.188.170</span><br><span class=\"line\">iqiyi.com.\t\t350\tIN\tA\t101.227.188.174</span><br><span class=\"line\">iqiyi.com.\t\t350\tIN\tA\t101.227.188.176</span><br><span class=\"line\">iqiyi.com.\t\t350\tIN\tA\t101.227.188.178</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第四段</span><br><span class=\"line\">;; Query time: 7 msec  </span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 17:45:11 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 107</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果说明<ul>\n<li>第一段 是查询命令说明以及结果统计信息展示</li>\n<li>第二段 查询内容</li>\n<li>第三段 查询结果内容，iqiyi.com的A记录有4个，350TTL（表明缓存时间是350s）。</li>\n<li>第四段 DNS服务器信息，192.168.3.1#53是本地DNS服务器192.168.3.1（家里的网关ip），53是端口号，DNS服务的默认端口。107是收到结果的大小107个字节。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"dig-short-简单查询\"><a href=\"#dig-short-简单查询\" class=\"headerlink\" title=\"dig +short 简单查询\"></a>dig +short 简单查询</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">101.227.188.170</span><br><span class=\"line\">101.227.188.174</span><br><span class=\"line\">101.227.188.172</span><br><span class=\"line\">101.227.188.176</span><br><span class=\"line\">101.227.188.178</span><br></pre></td></tr></table></figure>\n<p>只返回查询结果的ip地址。</p>\n<h2 id=\"dig分级查询\"><a href=\"#dig分级查询\" class=\"headerlink\" title=\"dig分级查询\"></a>dig分级查询</h2><p>执行命令:<code>dig iqiyi.com +trace</code>,得到结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com +trace</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Received 28 bytes from 192.168.3.1#53(192.168.3.1) in 3 ms</span><br></pre></td></tr></table></figure>\n<p>发现什么都没有返回，应该是本地服务器192.168.3.1网关不支持trace的查询。</p>\n<p>所以改用8.8.8.8服务器来查询，命令：<code>dig iqiyi.com +trace @8.8.8.8</code>,结果如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com +trace @8.8.8.8</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">&#x2F;&#x2F;首次查询 根域名服务器查询 （查询本地服务器）</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tf.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\th.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\te.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tl.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tc.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tb.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tm.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\ta.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\td.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\ti.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tk.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tj.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tNS\tg.root-servers.net.</span><br><span class=\"line\">.\t\t\t51069\tIN\tRRSIG\tNS 8 0 518400 20200110170000 20191228160000 22545 . O+lE7aOii9IvLdYuWpMrTY0RkPpbc0yJLAhg&#x2F;pwdxh8qZiACwS4TxuYo vxZrvoB0sJ7RyDgycViUEt++avEWx1JjzluiOXj1R0jqZQ7EXO+L+acP o88jV9F3Hqeuudj4u3ZZvM55eLnWfJaJzap&#x2F;H3xi87rt5obw3zMd5QZE M2zQXSnrCiI2rSelaTeeHx6Mu+8yVigaAwRAH&#x2F;8QdiAs2y2VuLbdl+C7 mHrbc3blraXSC6dzlGAEmryReOS5WOaMkSJZBctFbnX8KMmSdd83zBOv CVtdkPKGCwtUTWbbNZqrndYGqfCHf8NVLugz5R+jY3uzMvaQvdXBKwFT dcImog&#x3D;&#x3D;</span><br><span class=\"line\">;; Received 525 bytes from 8.8.8.8#53(8.8.8.8) in 41 ms</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第一次迭代 顶级域名（TLD）查询 (查询根域名服务器)</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tl.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tb.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tc.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\td.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\te.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tf.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tg.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\ta.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\th.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\ti.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tj.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tk.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t172800\tIN\tNS\tm.gtld-servers.net.</span><br><span class=\"line\">com.\t\t\t86400\tIN\tDS\t30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766</span><br><span class=\"line\">com.\t\t\t86400\tIN\tRRSIG\tDS 8 1 86400 20200111050000 20191229040000 22545 . YT51a7sayHoEdZByf40buEQfUYzapxyvAwfPV12AwfWRh4crg9jIVcY6 V79GO4Yb+ezclS4ZTvT+WZ9yLdwuWnzAGVTD0fd9RLvK03nk45ZK42LP MNSHwwUOjv338vqcubwqNOyjxpEukQF3TPXgKAV&#x2F;ltpGzQYmnDofCd+S uLAssjpag59wPWruFItrIvE6qD7xaDXv+oVsO&#x2F;bTp7pVb7NOi+KOCpMI D8aP4xm+624JWxLZ59YXOLOy3q1YVfLiVCe4ghtJS4&#x2F;6BIuRhQ3CAOmj w4QfJVrTDnyn&#x2F;RY3z41BnRT8K6CkUyuDc5Nc4NlU5KX3HxdiphW1w6JM oWNrPQ&#x3D;&#x3D;</span><br><span class=\"line\">;; Received 1169 bytes from 192.203.230.10#53(e.root-servers.net) in 170 ms</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第二次迭代 次级域名查询（查询TLD）</span><br><span class=\"line\">iqiyi.com.\t\t172800\tIN\tNS\tns1.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t172800\tIN\tNS\tns2.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t172800\tIN\tNS\tns3.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t172800\tIN\tNS\tns4.iqiyi.com.</span><br><span class=\"line\">CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN NSEC3 1 1 0 - CK0Q1GIN43N1ARRC9OSM6QPQR81H5M9A  NS SOA RRSIG DNSKEY NSEC3PARAM</span><br><span class=\"line\">CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN RRSIG NSEC3 8 2 86400 20200102054825 20191226043825 12163 com. J8V3FpilA7JdIt7GBym3CCORYjgGlHAazZlLNBiJ0bFa92n4PrX0hPYo oUHtAA4lEaw9eSJjOIVXhnKq9AR7EgQFfMxcT8OvbBVJ4eErF1vBjd1B x4EkZM2IHIVPPv8XlziufAhiSVMnYHcZnuO8BpDaXrasvlW3U9vv&#x2F;VQU dCs79XwjQR&#x2F;XkFvJKvldj2EZd3FXLlRDdnwESxhlpLZmIg&#x3D;&#x3D;</span><br><span class=\"line\">CDJHMJ049AHN95A56GE5FPTIT6CK3TVA.com. 86400 IN NSEC3 1 1 0 - CDJIFERNDE19197KLS7DLE5N5008MQB2  NS DS RRSIG</span><br><span class=\"line\">CDJHMJ049AHN95A56GE5FPTIT6CK3TVA.com. 86400 IN RRSIG NSEC3 8 2 86400 20200103053214 20191227042214 12163 com. LQOPbhYOUqtzkl49A0Sg7IVpJ8HVep5FwE5ILJ0cK&#x2F;5uGsvKk1bbrM4A s0M5iiaVnQ0BwTt9FRNdYRGUVUL6YSJATaouDomYj3o&#x2F;h+0kGxvrJxnF jRuDsQS56c6LDALzd+2Hv4xwiOURhv0Nl4v3rycokglC6IjN1VpGrgWN bldR9ixluPAQsBo+m3TdieQyb4zc10Ks3BAJg4UKmNQSLg&#x3D;&#x3D;</span><br><span class=\"line\">;; Received 723 bytes from 192.26.92.30#53(c.gtld-servers.net) in 171 ms</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第三次迭代  主机域名查询 （查询权威域名服务器）</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tA\t101.227.188.172</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tA\t101.227.188.174</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tA\t101.227.188.176</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tA\t101.227.188.178</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tA\t101.227.188.170</span><br><span class=\"line\">;; Received 118 bytes from 43.225.84.1#53(ns3.iqiyi.com) in 28 ms</span><br></pre></td></tr></table></figure>\n<p>根据每次迭代返回结果的服务器信息，我们可以发现DNS查询整体流程是这样的：</p>\n<img src=\"/2019/12/29/dig-and-dns-record-type/DNS_Query_Flow.png\" class=\"\" title=\"This is an image\">\n\n<ul>\n<li>首次查询 从本地服务器（local dns server）获取根域名服务器地址，然后由<strong>本地服务器</strong>开始迭代dns查询过程。</li>\n<li>第一次迭代 由本地服务器访问根域名服务器，根域名服务器返回关于顶级域名<code>.com</code>的NS记录。</li>\n<li>第二次迭代 由本地服务器访问上一步获得的<code>.com</code>地址的顶级域名服务器，并从中获得关于<code>iqiyi.com</code>的NS记录。</li>\n<li>第三次迭代 由本地服务器访问由上一步获得的<code>iqiyi.com</code>NS的服务器地址，即<code>iqiyi.com</code>的权威服务器，然后获得iqiyi.com的A记录。</li>\n<li>最终，本地服务器返回关于<code>iqiyi.com</code>的IP地址给客户端，然后客户端再访问目标服务器。</li>\n</ul>\n<h1 id=\"记录类型举例\"><a href=\"#记录类型举例\" class=\"headerlink\" title=\"记录类型举例\"></a>记录类型举例</h1><ol>\n<li>SOA记录 <code>dig iqiyi.com soa</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com soa</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 20850</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class=\"line\"></span><br><span class=\"line\">;; OPT PSEUDOSECTION:</span><br><span class=\"line\">; EDNS: version: 0, flags:; udp: 4096</span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;iqiyi.com.\t\t\tIN\tSOA</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">iqiyi.com.\t\t86400\tIN\tSOA\tns1.iqiyi.com. dnsadmin.iqiyi.com. 2019122905 1800 600 1209600 600</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 33 msec</span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 22:46:03 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 87</span><br></pre></td></tr></table></figure></li>\n<li>NS记录 <code>dig iqiyi.com ns</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com ns</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 21342</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class=\"line\"></span><br><span class=\"line\">;; OPT PSEUDOSECTION:</span><br><span class=\"line\">; EDNS: version: 0, flags:; udp: 4096</span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;iqiyi.com.\t\t\tIN\tNS</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">iqiyi.com.\t\t1132\tIN\tNS\tns2.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t1132\tIN\tNS\tns3.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t1132\tIN\tNS\tns4.iqiyi.com.</span><br><span class=\"line\">iqiyi.com.\t\t1132\tIN\tNS\tns1.iqiyi.com.</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 11 msec</span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 22:47:10 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 110</span><br></pre></td></tr></table></figure></li>\n<li>ns3.iqiyi.com的A记录 <code>dig ns3.iqiyi.com</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; ns3.iqiyi.com</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 11375</span><br><span class=\"line\">;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class=\"line\"></span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;ns3.iqiyi.com.\t\t\tIN\tA</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">ns3.iqiyi.com.\t\t296\tIN\tA\t43.225.84.1</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 51 msec</span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 22:49:07 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 47</span><br></pre></td></tr></table></figure></li>\n<li>MX记录 <code>dig iqiyi.com mx</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com mx</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 16303</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class=\"line\"></span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;iqiyi.com.\t\t\tIN\tMX</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">iqiyi.com.\t\t300\tIN\tMX\t10 mx1.iqiyi.com.</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 9 msec</span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 22:50:26 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 47</span><br></pre></td></tr></table></figure></li>\n<li>TXT记录 <code>dig iqiyi.com txt</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; iqiyi.com txt</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">;; Got answer:</span><br><span class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 28756</span><br><span class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class=\"line\"></span><br><span class=\"line\">;; OPT PSEUDOSECTION:</span><br><span class=\"line\">; EDNS: version: 0, flags:; udp: 4096</span><br><span class=\"line\">;; QUESTION SECTION:</span><br><span class=\"line\">;iqiyi.com.\t\t\tIN\tTXT</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tTXT\t&quot;92qpmvb8qgzqbvndvbgtrn9nlys14bxh&quot;</span><br><span class=\"line\">iqiyi.com.\t\t600\tIN\tTXT\t&quot;v&#x3D;spf1 ip4:202.108.14.100 a mx ~all&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 64 msec</span><br><span class=\"line\">;; SERVER: 192.168.3.1#53(192.168.3.1)</span><br><span class=\"line\">;; WHEN: Sun Dec 29 22:51:45 CST 2019</span><br><span class=\"line\">;; MSG SIZE  rcvd: 131</span><br></pre></td></tr></table></figure></li>\n<li>SRV、PTR<br>SRV与PRT不常用，所以iqiyi.com的域名服务器并没有配置这两项。</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.ruanyifeng.com/blog/2016/06/dns.html\" target=\"_blank\" rel=\"noopener\">DNS 原理入门</a></p>\n"},{"title":"DNS数据与类型","date":"2019-12-29T15:08:30.000Z","_content":"DNS是WWW万维网中重要的一环，内部涉及到多种数据类型，dns的数据称为记录（record），平时我们涉及到最多的可能只有IP解析服务的A记录，但深入了解下去，发现DNS有多种用于不同用途的数据类型，常见的主要有：\n- A (Host address)\n- AAAA (IPv6 host address)\n- CNAME (Canonical name for an alias)\n- MX (Mail eXchange)\n- NS (Name Server)\n- PTR (Pointer)\n- SOA (Start Of Authority)\n- SRV (location of service)\n- TXT (Descriptive text)\n\n更多的记录类型可以参考：https://simpledns.plus/help/dns-record-types\n\n# Zone文件\n要想清楚明白记录类型，就不得不去深入了解Zone文件。DNS服务器是采用Zone文件来进行数据管理的，每个Zone相当于一个独立的管理单元，一个DNS可以管理多个zone文件，一个zone文件也可以被多个单独的dns服务器管理（如主、从、缓存服务器）。\n\n## zone文件结构\n一个域名对应着一个zong文件，以abc.com为例，zone文件如下：\n```\n$TTL 6h //第1行\n$ORIGIN abc.com. //第2行\n@ 3600 IN SOA ns1.ddd.com. root.ddd.com.( //第3行\n    929142851 ; Serial //第4行\n    1800 ; Refresh //第5行\n    600 ; Retry //第6行\n    2w ; Expire //第7行\n    300 ; Minimum //第8行\n    ) \n@ 2d IN NS ns1.ddd.com. //第9行\n@ 2d IN NS ns2.ddd.com. //第10行\n@ 2d IN NS ns3.ddd.com. //第11行\nns1 3600 IN A 120.172.234.27 //第12行\nns2 3600 IN A 120.172.234.28 //第13行\nns3 3600 IN A 120.172.234.29 //第14行\na 3600 IN A 120.172.234.27 //第15行\nb 3600 IN CNAME a.abc.com. //第16行\n@ 3600 IN MX a.abc.com. //第17行\n@ 3600 IN TXT \"TXT\" //第18行\n```\n\n## 文件解释\n- 第1行，这行内容给出了该域名(`abc.com.`)各种记录的默认TTL值，这里为6小时。即如果该域名的记录没有特别定义TTL，则默认TTL为有效值。\n- 第2行，这行内容标识出该ZONE文件是隶属那个域名的，这里为`abc.com.`。\n- 第3行，从这行开始到第8行为该域名的SOA记录部分，这里的@代表域名本身。ns1.ddd.com表示该域名的主权威DNS。root.ddd.com表示该主权威DNS管理员邮箱，等价于root@ddd.com。\n- 第4行，Serial部分，这部分用来标记ZONE文件更新，如果发生更新则Serial要单增，否则MASTER不会通知SLAVE进行更新。\n- 第5行，Refresh部分，这个标记SLAVE服务器多长时间主动(忽略MASTER的更新通知)向MASTER复核Serial是否有变，如有变则更新之。\n- 第6行，Retry部分，如Refresh过程不能完成，重试的时间间隔。\n- 第7行，Expire部分，如SLAVE无法与MASTER取得联系，SLAVE继续提供DNS服务的时间，这里为2W(两周时间)。Expire时间到期后SLAVE仍然无法联系MASTER则停止工作，拒绝继续提供服务。Expire的实际意义在于它决定了MASTER服务器的最长下线时间(如MASTER迁移，DOWN机等)。\n- 第8行，Minimum部分，这个部分定义了DNS对否定回答(NXDOMAIN即访问的记录在权威DNS上不存在)的缓存时间。\n- 第9-11行，定义了该域名的3个权威DNS服务器。NS记录表明要想知道该域名的ip解析，就要向该地址的服务器请求访问，这里的域名是`abc.com.`，@表示本域名。那NS服务的具体地址是什么呢，由对应的ns域名的A记录来指定，如第12-14行。通常NS记录的TTL大些为宜，这里为2天。设置过小只会增加服务器无谓的负担，同时解析稳定性会受影响。\n- 第15-18行是常用的几个记录类型，详细请参考下一节。\n\n# 数据类型\n## SOA记录\n一个zone文件的第一个记录（Start Of Authority），记录了整个zone文件（权威域）的全局配置，如主域名、管理员邮箱、重试时间、刷新时间等等。\n## A、AAAA记录\nDNS中最常用的记录类型，用于IP解析功能，A记录用于IPv4的解析，AAAA用于IPv6的解析。\n## NS记录\nNS（NameServer）域名服务记录，是除A记录外必需的记录，用于记录指定域名的服务器解析地址。\n\n## CNAME记录\nCNAME相关于别名功能，对于多个不同的域名，采用同一个CNAME来方便配置。\n```\nwww IN CNAME name.abc.com.\nweb IN CNAME name.abc.com.\nhome IN CNAME name.abc.com.\nname IN A 110.10.1.2\n```\n例如三个不同的域名www.abc.com、web.abc.com、home.abc.com可以用同一个CNAME name.abc.com来表示，方便配置与修改。\n\n## MX记录\nMX（Mail Exchange）邮箱服务器地址，用于记录邮件地址对应的服务器地址，如mailname@abc.com的邮箱地址，邮件系统会根据abc.com域名的MX记录来找到指定的邮箱服务器地址。\n\n## PTR\nPTR记录可以理解为是A记录的反解，A记录是根据域名来获取ip地址，而PTR记录则是根据ip可以反向查出ip地址对应的域名，例如给定的ip属于www.abc.com。\n```\n; 50 是 10.0.1.50  4个数字中的最后一个\n; www.abc.com 必须是 FQDN\n\n50 IN PTR www.abc.com.\n```\n\n## SRV\nDNS SRV是DNS记录中一种，用来指定服务地址。与常见的A记录、cname不同的是，SRV中除了记录服务器的地址，还记录了服务的端口，并且可以设置每个服务地址的优先级和权重。访问服务的时候，本地的DNS resolver从DNS服务器查询到一个地址列表，根据优先级和权重，从中选取一个地址作为本次请求的目标地址。例如：\n```\n_ldap._tcp.example.com TTL Class SRV Priority Weight Port Target\nService: 服务名称，前缀“_”是为防止与DNS Label（普通域名）冲突。\nProto:   服务使用的通信协议，_TCP、_UDP、其它标准协议或者自定义的协议。\nName:    提供服务的域名。\nTTL:     缓存有效时间。\nCLASS:   类别\nPriority: 该记录的优先级，数值越小表示优先级越高，范围0-65535。\nWeight:   该记录的权重，数值越高权重越高，范围0-65535。     \nPort:     服务端口号，0-65535。\nTarget:   host地址。\n```\n一个能够支持SRV的LDAP client可以通过查询域名，得知LDAP服务的IP地址和服务端口。\n\n## TXT\nTXT记录用于DNS一些扩展功能，最多可记录65536个字节。通常主要用于域名拥有权验证（如google-site-verification)，SPF反垃圾邮箱验证等等。后续会对TXT记录做详细的介绍。\n\n# 参考文献\n- [Red Hat -- DNS [Zone 文件]](https://www.jianshu.com/p/073c4f407395)\n- [DNS扫盲系列之五：域名配置ZONE文件](https://www.cnblogs.com/niuchunjian/p/3485724.html)\n- [SRV记录](https://www.lijiaocn.com/%E6%8A%80%E5%B7%A7/2017/03/06/dns-srv.html)\n- https://simpledns.plus/help/dns-record-types","source":"_posts/dns-data-type-md.md","raw":"---\ntitle: DNS数据与类型\ndate: 2019-12-29 23:08:30\ncategories: \n    - 网络\n    - DNS\n---\nDNS是WWW万维网中重要的一环，内部涉及到多种数据类型，dns的数据称为记录（record），平时我们涉及到最多的可能只有IP解析服务的A记录，但深入了解下去，发现DNS有多种用于不同用途的数据类型，常见的主要有：\n- A (Host address)\n- AAAA (IPv6 host address)\n- CNAME (Canonical name for an alias)\n- MX (Mail eXchange)\n- NS (Name Server)\n- PTR (Pointer)\n- SOA (Start Of Authority)\n- SRV (location of service)\n- TXT (Descriptive text)\n\n更多的记录类型可以参考：https://simpledns.plus/help/dns-record-types\n\n# Zone文件\n要想清楚明白记录类型，就不得不去深入了解Zone文件。DNS服务器是采用Zone文件来进行数据管理的，每个Zone相当于一个独立的管理单元，一个DNS可以管理多个zone文件，一个zone文件也可以被多个单独的dns服务器管理（如主、从、缓存服务器）。\n\n## zone文件结构\n一个域名对应着一个zong文件，以abc.com为例，zone文件如下：\n```\n$TTL 6h //第1行\n$ORIGIN abc.com. //第2行\n@ 3600 IN SOA ns1.ddd.com. root.ddd.com.( //第3行\n    929142851 ; Serial //第4行\n    1800 ; Refresh //第5行\n    600 ; Retry //第6行\n    2w ; Expire //第7行\n    300 ; Minimum //第8行\n    ) \n@ 2d IN NS ns1.ddd.com. //第9行\n@ 2d IN NS ns2.ddd.com. //第10行\n@ 2d IN NS ns3.ddd.com. //第11行\nns1 3600 IN A 120.172.234.27 //第12行\nns2 3600 IN A 120.172.234.28 //第13行\nns3 3600 IN A 120.172.234.29 //第14行\na 3600 IN A 120.172.234.27 //第15行\nb 3600 IN CNAME a.abc.com. //第16行\n@ 3600 IN MX a.abc.com. //第17行\n@ 3600 IN TXT \"TXT\" //第18行\n```\n\n## 文件解释\n- 第1行，这行内容给出了该域名(`abc.com.`)各种记录的默认TTL值，这里为6小时。即如果该域名的记录没有特别定义TTL，则默认TTL为有效值。\n- 第2行，这行内容标识出该ZONE文件是隶属那个域名的，这里为`abc.com.`。\n- 第3行，从这行开始到第8行为该域名的SOA记录部分，这里的@代表域名本身。ns1.ddd.com表示该域名的主权威DNS。root.ddd.com表示该主权威DNS管理员邮箱，等价于root@ddd.com。\n- 第4行，Serial部分，这部分用来标记ZONE文件更新，如果发生更新则Serial要单增，否则MASTER不会通知SLAVE进行更新。\n- 第5行，Refresh部分，这个标记SLAVE服务器多长时间主动(忽略MASTER的更新通知)向MASTER复核Serial是否有变，如有变则更新之。\n- 第6行，Retry部分，如Refresh过程不能完成，重试的时间间隔。\n- 第7行，Expire部分，如SLAVE无法与MASTER取得联系，SLAVE继续提供DNS服务的时间，这里为2W(两周时间)。Expire时间到期后SLAVE仍然无法联系MASTER则停止工作，拒绝继续提供服务。Expire的实际意义在于它决定了MASTER服务器的最长下线时间(如MASTER迁移，DOWN机等)。\n- 第8行，Minimum部分，这个部分定义了DNS对否定回答(NXDOMAIN即访问的记录在权威DNS上不存在)的缓存时间。\n- 第9-11行，定义了该域名的3个权威DNS服务器。NS记录表明要想知道该域名的ip解析，就要向该地址的服务器请求访问，这里的域名是`abc.com.`，@表示本域名。那NS服务的具体地址是什么呢，由对应的ns域名的A记录来指定，如第12-14行。通常NS记录的TTL大些为宜，这里为2天。设置过小只会增加服务器无谓的负担，同时解析稳定性会受影响。\n- 第15-18行是常用的几个记录类型，详细请参考下一节。\n\n# 数据类型\n## SOA记录\n一个zone文件的第一个记录（Start Of Authority），记录了整个zone文件（权威域）的全局配置，如主域名、管理员邮箱、重试时间、刷新时间等等。\n## A、AAAA记录\nDNS中最常用的记录类型，用于IP解析功能，A记录用于IPv4的解析，AAAA用于IPv6的解析。\n## NS记录\nNS（NameServer）域名服务记录，是除A记录外必需的记录，用于记录指定域名的服务器解析地址。\n\n## CNAME记录\nCNAME相关于别名功能，对于多个不同的域名，采用同一个CNAME来方便配置。\n```\nwww IN CNAME name.abc.com.\nweb IN CNAME name.abc.com.\nhome IN CNAME name.abc.com.\nname IN A 110.10.1.2\n```\n例如三个不同的域名www.abc.com、web.abc.com、home.abc.com可以用同一个CNAME name.abc.com来表示，方便配置与修改。\n\n## MX记录\nMX（Mail Exchange）邮箱服务器地址，用于记录邮件地址对应的服务器地址，如mailname@abc.com的邮箱地址，邮件系统会根据abc.com域名的MX记录来找到指定的邮箱服务器地址。\n\n## PTR\nPTR记录可以理解为是A记录的反解，A记录是根据域名来获取ip地址，而PTR记录则是根据ip可以反向查出ip地址对应的域名，例如给定的ip属于www.abc.com。\n```\n; 50 是 10.0.1.50  4个数字中的最后一个\n; www.abc.com 必须是 FQDN\n\n50 IN PTR www.abc.com.\n```\n\n## SRV\nDNS SRV是DNS记录中一种，用来指定服务地址。与常见的A记录、cname不同的是，SRV中除了记录服务器的地址，还记录了服务的端口，并且可以设置每个服务地址的优先级和权重。访问服务的时候，本地的DNS resolver从DNS服务器查询到一个地址列表，根据优先级和权重，从中选取一个地址作为本次请求的目标地址。例如：\n```\n_ldap._tcp.example.com TTL Class SRV Priority Weight Port Target\nService: 服务名称，前缀“_”是为防止与DNS Label（普通域名）冲突。\nProto:   服务使用的通信协议，_TCP、_UDP、其它标准协议或者自定义的协议。\nName:    提供服务的域名。\nTTL:     缓存有效时间。\nCLASS:   类别\nPriority: 该记录的优先级，数值越小表示优先级越高，范围0-65535。\nWeight:   该记录的权重，数值越高权重越高，范围0-65535。     \nPort:     服务端口号，0-65535。\nTarget:   host地址。\n```\n一个能够支持SRV的LDAP client可以通过查询域名，得知LDAP服务的IP地址和服务端口。\n\n## TXT\nTXT记录用于DNS一些扩展功能，最多可记录65536个字节。通常主要用于域名拥有权验证（如google-site-verification)，SPF反垃圾邮箱验证等等。后续会对TXT记录做详细的介绍。\n\n# 参考文献\n- [Red Hat -- DNS [Zone 文件]](https://www.jianshu.com/p/073c4f407395)\n- [DNS扫盲系列之五：域名配置ZONE文件](https://www.cnblogs.com/niuchunjian/p/3485724.html)\n- [SRV记录](https://www.lijiaocn.com/%E6%8A%80%E5%B7%A7/2017/03/06/dns-srv.html)\n- https://simpledns.plus/help/dns-record-types","slug":"dns-data-type-md","published":1,"updated":"2019-12-29T15:10:44.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4r6b9rs0004317a15miey5w","content":"<p>DNS是WWW万维网中重要的一环，内部涉及到多种数据类型，dns的数据称为记录（record），平时我们涉及到最多的可能只有IP解析服务的A记录，但深入了解下去，发现DNS有多种用于不同用途的数据类型，常见的主要有：</p>\n<ul>\n<li>A (Host address)</li>\n<li>AAAA (IPv6 host address)</li>\n<li>CNAME (Canonical name for an alias)</li>\n<li>MX (Mail eXchange)</li>\n<li>NS (Name Server)</li>\n<li>PTR (Pointer)</li>\n<li>SOA (Start Of Authority)</li>\n<li>SRV (location of service)</li>\n<li>TXT (Descriptive text)</li>\n</ul>\n<p>更多的记录类型可以参考：<a href=\"https://simpledns.plus/help/dns-record-types\" target=\"_blank\" rel=\"noopener\">https://simpledns.plus/help/dns-record-types</a></p>\n<h1 id=\"Zone文件\"><a href=\"#Zone文件\" class=\"headerlink\" title=\"Zone文件\"></a>Zone文件</h1><p>要想清楚明白记录类型，就不得不去深入了解Zone文件。DNS服务器是采用Zone文件来进行数据管理的，每个Zone相当于一个独立的管理单元，一个DNS可以管理多个zone文件，一个zone文件也可以被多个单独的dns服务器管理（如主、从、缓存服务器）。</p>\n<h2 id=\"zone文件结构\"><a href=\"#zone文件结构\" class=\"headerlink\" title=\"zone文件结构\"></a>zone文件结构</h2><p>一个域名对应着一个zong文件，以abc.com为例，zone文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$TTL 6h &#x2F;&#x2F;第1行</span><br><span class=\"line\">$ORIGIN abc.com. &#x2F;&#x2F;第2行</span><br><span class=\"line\">@ 3600 IN SOA ns1.ddd.com. root.ddd.com.( &#x2F;&#x2F;第3行</span><br><span class=\"line\">    929142851 ; Serial &#x2F;&#x2F;第4行</span><br><span class=\"line\">    1800 ; Refresh &#x2F;&#x2F;第5行</span><br><span class=\"line\">    600 ; Retry &#x2F;&#x2F;第6行</span><br><span class=\"line\">    2w ; Expire &#x2F;&#x2F;第7行</span><br><span class=\"line\">    300 ; Minimum &#x2F;&#x2F;第8行</span><br><span class=\"line\">    ) </span><br><span class=\"line\">@ 2d IN NS ns1.ddd.com. &#x2F;&#x2F;第9行</span><br><span class=\"line\">@ 2d IN NS ns2.ddd.com. &#x2F;&#x2F;第10行</span><br><span class=\"line\">@ 2d IN NS ns3.ddd.com. &#x2F;&#x2F;第11行</span><br><span class=\"line\">ns1 3600 IN A 120.172.234.27 &#x2F;&#x2F;第12行</span><br><span class=\"line\">ns2 3600 IN A 120.172.234.28 &#x2F;&#x2F;第13行</span><br><span class=\"line\">ns3 3600 IN A 120.172.234.29 &#x2F;&#x2F;第14行</span><br><span class=\"line\">a 3600 IN A 120.172.234.27 &#x2F;&#x2F;第15行</span><br><span class=\"line\">b 3600 IN CNAME a.abc.com. &#x2F;&#x2F;第16行</span><br><span class=\"line\">@ 3600 IN MX a.abc.com. &#x2F;&#x2F;第17行</span><br><span class=\"line\">@ 3600 IN TXT &quot;TXT&quot; &#x2F;&#x2F;第18行</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件解释\"><a href=\"#文件解释\" class=\"headerlink\" title=\"文件解释\"></a>文件解释</h2><ul>\n<li>第1行，这行内容给出了该域名(<code>abc.com.</code>)各种记录的默认TTL值，这里为6小时。即如果该域名的记录没有特别定义TTL，则默认TTL为有效值。</li>\n<li>第2行，这行内容标识出该ZONE文件是隶属那个域名的，这里为<code>abc.com.</code>。</li>\n<li>第3行，从这行开始到第8行为该域名的SOA记录部分，这里的@代表域名本身。ns1.ddd.com表示该域名的主权威DNS。root.ddd.com表示该主权威DNS管理员邮箱，等价于<a href=\"mailto:root@ddd.com\">root@ddd.com</a>。</li>\n<li>第4行，Serial部分，这部分用来标记ZONE文件更新，如果发生更新则Serial要单增，否则MASTER不会通知SLAVE进行更新。</li>\n<li>第5行，Refresh部分，这个标记SLAVE服务器多长时间主动(忽略MASTER的更新通知)向MASTER复核Serial是否有变，如有变则更新之。</li>\n<li>第6行，Retry部分，如Refresh过程不能完成，重试的时间间隔。</li>\n<li>第7行，Expire部分，如SLAVE无法与MASTER取得联系，SLAVE继续提供DNS服务的时间，这里为2W(两周时间)。Expire时间到期后SLAVE仍然无法联系MASTER则停止工作，拒绝继续提供服务。Expire的实际意义在于它决定了MASTER服务器的最长下线时间(如MASTER迁移，DOWN机等)。</li>\n<li>第8行，Minimum部分，这个部分定义了DNS对否定回答(NXDOMAIN即访问的记录在权威DNS上不存在)的缓存时间。</li>\n<li>第9-11行，定义了该域名的3个权威DNS服务器。NS记录表明要想知道该域名的ip解析，就要向该地址的服务器请求访问，这里的域名是<code>abc.com.</code>，@表示本域名。那NS服务的具体地址是什么呢，由对应的ns域名的A记录来指定，如第12-14行。通常NS记录的TTL大些为宜，这里为2天。设置过小只会增加服务器无谓的负担，同时解析稳定性会受影响。</li>\n<li>第15-18行是常用的几个记录类型，详细请参考下一节。</li>\n</ul>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"SOA记录\"><a href=\"#SOA记录\" class=\"headerlink\" title=\"SOA记录\"></a>SOA记录</h2><p>一个zone文件的第一个记录（Start Of Authority），记录了整个zone文件（权威域）的全局配置，如主域名、管理员邮箱、重试时间、刷新时间等等。</p>\n<h2 id=\"A、AAAA记录\"><a href=\"#A、AAAA记录\" class=\"headerlink\" title=\"A、AAAA记录\"></a>A、AAAA记录</h2><p>DNS中最常用的记录类型，用于IP解析功能，A记录用于IPv4的解析，AAAA用于IPv6的解析。</p>\n<h2 id=\"NS记录\"><a href=\"#NS记录\" class=\"headerlink\" title=\"NS记录\"></a>NS记录</h2><p>NS（NameServer）域名服务记录，是除A记录外必需的记录，用于记录指定域名的服务器解析地址。</p>\n<h2 id=\"CNAME记录\"><a href=\"#CNAME记录\" class=\"headerlink\" title=\"CNAME记录\"></a>CNAME记录</h2><p>CNAME相关于别名功能，对于多个不同的域名，采用同一个CNAME来方便配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www IN CNAME name.abc.com.</span><br><span class=\"line\">web IN CNAME name.abc.com.</span><br><span class=\"line\">home IN CNAME name.abc.com.</span><br><span class=\"line\">name IN A 110.10.1.2</span><br></pre></td></tr></table></figure>\n<p>例如三个不同的域名<a href=\"http://www.abc.com、web.abc.com、home.abc.com可以用同一个CNAME\" target=\"_blank\" rel=\"noopener\">www.abc.com、web.abc.com、home.abc.com可以用同一个CNAME</a> name.abc.com来表示，方便配置与修改。</p>\n<h2 id=\"MX记录\"><a href=\"#MX记录\" class=\"headerlink\" title=\"MX记录\"></a>MX记录</h2><p>MX（Mail Exchange）邮箱服务器地址，用于记录邮件地址对应的服务器地址，如<a href=\"mailto:mailname@abc.com\">mailname@abc.com</a>的邮箱地址，邮件系统会根据abc.com域名的MX记录来找到指定的邮箱服务器地址。</p>\n<h2 id=\"PTR\"><a href=\"#PTR\" class=\"headerlink\" title=\"PTR\"></a>PTR</h2><p>PTR记录可以理解为是A记录的反解，A记录是根据域名来获取ip地址，而PTR记录则是根据ip可以反向查出ip地址对应的域名，例如给定的ip属于<a href=\"http://www.abc.com。\" target=\"_blank\" rel=\"noopener\">www.abc.com。</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; 50 是 10.0.1.50  4个数字中的最后一个</span><br><span class=\"line\">; www.abc.com 必须是 FQDN</span><br><span class=\"line\"></span><br><span class=\"line\">50 IN PTR www.abc.com.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SRV\"><a href=\"#SRV\" class=\"headerlink\" title=\"SRV\"></a>SRV</h2><p>DNS SRV是DNS记录中一种，用来指定服务地址。与常见的A记录、cname不同的是，SRV中除了记录服务器的地址，还记录了服务的端口，并且可以设置每个服务地址的优先级和权重。访问服务的时候，本地的DNS resolver从DNS服务器查询到一个地址列表，根据优先级和权重，从中选取一个地址作为本次请求的目标地址。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_ldap._tcp.example.com TTL Class SRV Priority Weight Port Target</span><br><span class=\"line\">Service: 服务名称，前缀“_”是为防止与DNS Label（普通域名）冲突。</span><br><span class=\"line\">Proto:   服务使用的通信协议，_TCP、_UDP、其它标准协议或者自定义的协议。</span><br><span class=\"line\">Name:    提供服务的域名。</span><br><span class=\"line\">TTL:     缓存有效时间。</span><br><span class=\"line\">CLASS:   类别</span><br><span class=\"line\">Priority: 该记录的优先级，数值越小表示优先级越高，范围0-65535。</span><br><span class=\"line\">Weight:   该记录的权重，数值越高权重越高，范围0-65535。     </span><br><span class=\"line\">Port:     服务端口号，0-65535。</span><br><span class=\"line\">Target:   host地址。</span><br></pre></td></tr></table></figure>\n<p>一个能够支持SRV的LDAP client可以通过查询域名，得知LDAP服务的IP地址和服务端口。</p>\n<h2 id=\"TXT\"><a href=\"#TXT\" class=\"headerlink\" title=\"TXT\"></a>TXT</h2><p>TXT记录用于DNS一些扩展功能，最多可记录65536个字节。通常主要用于域名拥有权验证（如google-site-verification)，SPF反垃圾邮箱验证等等。后续会对TXT记录做详细的介绍。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/073c4f407395\" target=\"_blank\" rel=\"noopener\">Red Hat – DNS [Zone 文件]</a></li>\n<li><a href=\"https://www.cnblogs.com/niuchunjian/p/3485724.html\" target=\"_blank\" rel=\"noopener\">DNS扫盲系列之五：域名配置ZONE文件</a></li>\n<li><a href=\"https://www.lijiaocn.com/%E6%8A%80%E5%B7%A7/2017/03/06/dns-srv.html\" target=\"_blank\" rel=\"noopener\">SRV记录</a></li>\n<li><a href=\"https://simpledns.plus/help/dns-record-types\" target=\"_blank\" rel=\"noopener\">https://simpledns.plus/help/dns-record-types</a></li>\n</ul>\n","site":{"data":{}},"length":3325,"excerpt":"","more":"<p>DNS是WWW万维网中重要的一环，内部涉及到多种数据类型，dns的数据称为记录（record），平时我们涉及到最多的可能只有IP解析服务的A记录，但深入了解下去，发现DNS有多种用于不同用途的数据类型，常见的主要有：</p>\n<ul>\n<li>A (Host address)</li>\n<li>AAAA (IPv6 host address)</li>\n<li>CNAME (Canonical name for an alias)</li>\n<li>MX (Mail eXchange)</li>\n<li>NS (Name Server)</li>\n<li>PTR (Pointer)</li>\n<li>SOA (Start Of Authority)</li>\n<li>SRV (location of service)</li>\n<li>TXT (Descriptive text)</li>\n</ul>\n<p>更多的记录类型可以参考：<a href=\"https://simpledns.plus/help/dns-record-types\" target=\"_blank\" rel=\"noopener\">https://simpledns.plus/help/dns-record-types</a></p>\n<h1 id=\"Zone文件\"><a href=\"#Zone文件\" class=\"headerlink\" title=\"Zone文件\"></a>Zone文件</h1><p>要想清楚明白记录类型，就不得不去深入了解Zone文件。DNS服务器是采用Zone文件来进行数据管理的，每个Zone相当于一个独立的管理单元，一个DNS可以管理多个zone文件，一个zone文件也可以被多个单独的dns服务器管理（如主、从、缓存服务器）。</p>\n<h2 id=\"zone文件结构\"><a href=\"#zone文件结构\" class=\"headerlink\" title=\"zone文件结构\"></a>zone文件结构</h2><p>一个域名对应着一个zong文件，以abc.com为例，zone文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$TTL 6h &#x2F;&#x2F;第1行</span><br><span class=\"line\">$ORIGIN abc.com. &#x2F;&#x2F;第2行</span><br><span class=\"line\">@ 3600 IN SOA ns1.ddd.com. root.ddd.com.( &#x2F;&#x2F;第3行</span><br><span class=\"line\">    929142851 ; Serial &#x2F;&#x2F;第4行</span><br><span class=\"line\">    1800 ; Refresh &#x2F;&#x2F;第5行</span><br><span class=\"line\">    600 ; Retry &#x2F;&#x2F;第6行</span><br><span class=\"line\">    2w ; Expire &#x2F;&#x2F;第7行</span><br><span class=\"line\">    300 ; Minimum &#x2F;&#x2F;第8行</span><br><span class=\"line\">    ) </span><br><span class=\"line\">@ 2d IN NS ns1.ddd.com. &#x2F;&#x2F;第9行</span><br><span class=\"line\">@ 2d IN NS ns2.ddd.com. &#x2F;&#x2F;第10行</span><br><span class=\"line\">@ 2d IN NS ns3.ddd.com. &#x2F;&#x2F;第11行</span><br><span class=\"line\">ns1 3600 IN A 120.172.234.27 &#x2F;&#x2F;第12行</span><br><span class=\"line\">ns2 3600 IN A 120.172.234.28 &#x2F;&#x2F;第13行</span><br><span class=\"line\">ns3 3600 IN A 120.172.234.29 &#x2F;&#x2F;第14行</span><br><span class=\"line\">a 3600 IN A 120.172.234.27 &#x2F;&#x2F;第15行</span><br><span class=\"line\">b 3600 IN CNAME a.abc.com. &#x2F;&#x2F;第16行</span><br><span class=\"line\">@ 3600 IN MX a.abc.com. &#x2F;&#x2F;第17行</span><br><span class=\"line\">@ 3600 IN TXT &quot;TXT&quot; &#x2F;&#x2F;第18行</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件解释\"><a href=\"#文件解释\" class=\"headerlink\" title=\"文件解释\"></a>文件解释</h2><ul>\n<li>第1行，这行内容给出了该域名(<code>abc.com.</code>)各种记录的默认TTL值，这里为6小时。即如果该域名的记录没有特别定义TTL，则默认TTL为有效值。</li>\n<li>第2行，这行内容标识出该ZONE文件是隶属那个域名的，这里为<code>abc.com.</code>。</li>\n<li>第3行，从这行开始到第8行为该域名的SOA记录部分，这里的@代表域名本身。ns1.ddd.com表示该域名的主权威DNS。root.ddd.com表示该主权威DNS管理员邮箱，等价于<a href=\"mailto:root@ddd.com\">root@ddd.com</a>。</li>\n<li>第4行，Serial部分，这部分用来标记ZONE文件更新，如果发生更新则Serial要单增，否则MASTER不会通知SLAVE进行更新。</li>\n<li>第5行，Refresh部分，这个标记SLAVE服务器多长时间主动(忽略MASTER的更新通知)向MASTER复核Serial是否有变，如有变则更新之。</li>\n<li>第6行，Retry部分，如Refresh过程不能完成，重试的时间间隔。</li>\n<li>第7行，Expire部分，如SLAVE无法与MASTER取得联系，SLAVE继续提供DNS服务的时间，这里为2W(两周时间)。Expire时间到期后SLAVE仍然无法联系MASTER则停止工作，拒绝继续提供服务。Expire的实际意义在于它决定了MASTER服务器的最长下线时间(如MASTER迁移，DOWN机等)。</li>\n<li>第8行，Minimum部分，这个部分定义了DNS对否定回答(NXDOMAIN即访问的记录在权威DNS上不存在)的缓存时间。</li>\n<li>第9-11行，定义了该域名的3个权威DNS服务器。NS记录表明要想知道该域名的ip解析，就要向该地址的服务器请求访问，这里的域名是<code>abc.com.</code>，@表示本域名。那NS服务的具体地址是什么呢，由对应的ns域名的A记录来指定，如第12-14行。通常NS记录的TTL大些为宜，这里为2天。设置过小只会增加服务器无谓的负担，同时解析稳定性会受影响。</li>\n<li>第15-18行是常用的几个记录类型，详细请参考下一节。</li>\n</ul>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"SOA记录\"><a href=\"#SOA记录\" class=\"headerlink\" title=\"SOA记录\"></a>SOA记录</h2><p>一个zone文件的第一个记录（Start Of Authority），记录了整个zone文件（权威域）的全局配置，如主域名、管理员邮箱、重试时间、刷新时间等等。</p>\n<h2 id=\"A、AAAA记录\"><a href=\"#A、AAAA记录\" class=\"headerlink\" title=\"A、AAAA记录\"></a>A、AAAA记录</h2><p>DNS中最常用的记录类型，用于IP解析功能，A记录用于IPv4的解析，AAAA用于IPv6的解析。</p>\n<h2 id=\"NS记录\"><a href=\"#NS记录\" class=\"headerlink\" title=\"NS记录\"></a>NS记录</h2><p>NS（NameServer）域名服务记录，是除A记录外必需的记录，用于记录指定域名的服务器解析地址。</p>\n<h2 id=\"CNAME记录\"><a href=\"#CNAME记录\" class=\"headerlink\" title=\"CNAME记录\"></a>CNAME记录</h2><p>CNAME相关于别名功能，对于多个不同的域名，采用同一个CNAME来方便配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www IN CNAME name.abc.com.</span><br><span class=\"line\">web IN CNAME name.abc.com.</span><br><span class=\"line\">home IN CNAME name.abc.com.</span><br><span class=\"line\">name IN A 110.10.1.2</span><br></pre></td></tr></table></figure>\n<p>例如三个不同的域名<a href=\"http://www.abc.com、web.abc.com、home.abc.com可以用同一个CNAME\" target=\"_blank\" rel=\"noopener\">www.abc.com、web.abc.com、home.abc.com可以用同一个CNAME</a> name.abc.com来表示，方便配置与修改。</p>\n<h2 id=\"MX记录\"><a href=\"#MX记录\" class=\"headerlink\" title=\"MX记录\"></a>MX记录</h2><p>MX（Mail Exchange）邮箱服务器地址，用于记录邮件地址对应的服务器地址，如<a href=\"mailto:mailname@abc.com\">mailname@abc.com</a>的邮箱地址，邮件系统会根据abc.com域名的MX记录来找到指定的邮箱服务器地址。</p>\n<h2 id=\"PTR\"><a href=\"#PTR\" class=\"headerlink\" title=\"PTR\"></a>PTR</h2><p>PTR记录可以理解为是A记录的反解，A记录是根据域名来获取ip地址，而PTR记录则是根据ip可以反向查出ip地址对应的域名，例如给定的ip属于<a href=\"http://www.abc.com。\" target=\"_blank\" rel=\"noopener\">www.abc.com。</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; 50 是 10.0.1.50  4个数字中的最后一个</span><br><span class=\"line\">; www.abc.com 必须是 FQDN</span><br><span class=\"line\"></span><br><span class=\"line\">50 IN PTR www.abc.com.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SRV\"><a href=\"#SRV\" class=\"headerlink\" title=\"SRV\"></a>SRV</h2><p>DNS SRV是DNS记录中一种，用来指定服务地址。与常见的A记录、cname不同的是，SRV中除了记录服务器的地址，还记录了服务的端口，并且可以设置每个服务地址的优先级和权重。访问服务的时候，本地的DNS resolver从DNS服务器查询到一个地址列表，根据优先级和权重，从中选取一个地址作为本次请求的目标地址。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_ldap._tcp.example.com TTL Class SRV Priority Weight Port Target</span><br><span class=\"line\">Service: 服务名称，前缀“_”是为防止与DNS Label（普通域名）冲突。</span><br><span class=\"line\">Proto:   服务使用的通信协议，_TCP、_UDP、其它标准协议或者自定义的协议。</span><br><span class=\"line\">Name:    提供服务的域名。</span><br><span class=\"line\">TTL:     缓存有效时间。</span><br><span class=\"line\">CLASS:   类别</span><br><span class=\"line\">Priority: 该记录的优先级，数值越小表示优先级越高，范围0-65535。</span><br><span class=\"line\">Weight:   该记录的权重，数值越高权重越高，范围0-65535。     </span><br><span class=\"line\">Port:     服务端口号，0-65535。</span><br><span class=\"line\">Target:   host地址。</span><br></pre></td></tr></table></figure>\n<p>一个能够支持SRV的LDAP client可以通过查询域名，得知LDAP服务的IP地址和服务端口。</p>\n<h2 id=\"TXT\"><a href=\"#TXT\" class=\"headerlink\" title=\"TXT\"></a>TXT</h2><p>TXT记录用于DNS一些扩展功能，最多可记录65536个字节。通常主要用于域名拥有权验证（如google-site-verification)，SPF反垃圾邮箱验证等等。后续会对TXT记录做详细的介绍。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/073c4f407395\" target=\"_blank\" rel=\"noopener\">Red Hat – DNS [Zone 文件]</a></li>\n<li><a href=\"https://www.cnblogs.com/niuchunjian/p/3485724.html\" target=\"_blank\" rel=\"noopener\">DNS扫盲系列之五：域名配置ZONE文件</a></li>\n<li><a href=\"https://www.lijiaocn.com/%E6%8A%80%E5%B7%A7/2017/03/06/dns-srv.html\" target=\"_blank\" rel=\"noopener\">SRV记录</a></li>\n<li><a href=\"https://simpledns.plus/help/dns-record-types\" target=\"_blank\" rel=\"noopener\">https://simpledns.plus/help/dns-record-types</a></li>\n</ul>\n"},{"title":"用Hexo建立Git Hub 博客","date":"2019-12-17T03:33:32.000Z","_content":"\n## 主要链接\n1. Hexo安装 https://hexo.io/docs/setup\n2. Hexo发布到GitHub https://hexo.io/docs/github-pages\n3. Next主题安装 https://github.com/theme-next/hexo-theme-next\n4. Next主题使用教程 http://theme-next.iissnan.com/\n\n## 添加插件\n1. 站长工具 cnzz\n目前v7.6.0版本安装cnzz特别简单，只需要将创建的cnzz的id写入_config.yml里cnzz_siteid即可，无需添加其他任何文件。\n如何申请友盟，请参考https://www.jianshu.com/p/3025b0e221bf\n2. 添加mermaid画图\n  - npm install hexo-filter-mermaid-diagrams --save\n  - 修改themes/next下的_config.yml:\n```\n# Mermaid tag\nmermaid:\n  enable: false\n  # Available themes: default | dark | forest | neutral\n  theme: forest\n  cdn: //cdn.jsdelivr.net/npm/mermaid@8/dist/mermaid.min.js\n  #cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.0.0/mermaid.min.js\n```\n具体请参考 https://rogersnowing.cn/post/38b5106c.html\n\n## 问题解决\n1. 当博客域名是子URL时，例如https://xxx.github.io/blog，则修改站点配置文件如下：\n```yaml\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://gaocher.github.io/blog\nroot: /blog/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n```\n\n## 参考文章：\nhttps://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html\nhttps://github.com/EZLippi/hexo-theme","source":"_posts/first-blog.md","raw":"---\ntitle: 用Hexo建立Git Hub 博客\ndate: 2019-12-17 11:33:32\ntags:\ncategories: \n    - 工具\n    - 文字\n---\n\n## 主要链接\n1. Hexo安装 https://hexo.io/docs/setup\n2. Hexo发布到GitHub https://hexo.io/docs/github-pages\n3. Next主题安装 https://github.com/theme-next/hexo-theme-next\n4. Next主题使用教程 http://theme-next.iissnan.com/\n\n## 添加插件\n1. 站长工具 cnzz\n目前v7.6.0版本安装cnzz特别简单，只需要将创建的cnzz的id写入_config.yml里cnzz_siteid即可，无需添加其他任何文件。\n如何申请友盟，请参考https://www.jianshu.com/p/3025b0e221bf\n2. 添加mermaid画图\n  - npm install hexo-filter-mermaid-diagrams --save\n  - 修改themes/next下的_config.yml:\n```\n# Mermaid tag\nmermaid:\n  enable: false\n  # Available themes: default | dark | forest | neutral\n  theme: forest\n  cdn: //cdn.jsdelivr.net/npm/mermaid@8/dist/mermaid.min.js\n  #cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.0.0/mermaid.min.js\n```\n具体请参考 https://rogersnowing.cn/post/38b5106c.html\n\n## 问题解决\n1. 当博客域名是子URL时，例如https://xxx.github.io/blog，则修改站点配置文件如下：\n```yaml\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://gaocher.github.io/blog\nroot: /blog/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n```\n\n## 参考文章：\nhttps://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html\nhttps://github.com/EZLippi/hexo-theme","slug":"first-blog","published":1,"updated":"2019-12-20T07:19:42.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4r6b9ru0005317a6jce4tty","content":"<h2 id=\"主要链接\"><a href=\"#主要链接\" class=\"headerlink\" title=\"主要链接\"></a>主要链接</h2><ol>\n<li>Hexo安装 <a href=\"https://hexo.io/docs/setup\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/setup</a></li>\n<li>Hexo发布到GitHub <a href=\"https://hexo.io/docs/github-pages\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/github-pages</a></li>\n<li>Next主题安装 <a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">https://github.com/theme-next/hexo-theme-next</a></li>\n<li>Next主题使用教程 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/</a></li>\n</ol>\n<h2 id=\"添加插件\"><a href=\"#添加插件\" class=\"headerlink\" title=\"添加插件\"></a>添加插件</h2><ol>\n<li>站长工具 cnzz<br>目前v7.6.0版本安装cnzz特别简单，只需要将创建的cnzz的id写入_config.yml里cnzz_siteid即可，无需添加其他任何文件。<br>如何申请友盟，请参考<a href=\"https://www.jianshu.com/p/3025b0e221bf\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/3025b0e221bf</a></li>\n<li>添加mermaid画图<ul>\n<li>npm install hexo-filter-mermaid-diagrams –save</li>\n<li>修改themes/next下的_config.yml:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Mermaid tag</span><br><span class=\"line\">mermaid:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  # Available themes: default | dark | forest | neutral</span><br><span class=\"line\">  theme: forest</span><br><span class=\"line\">  cdn: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;mermaid@8&#x2F;dist&#x2F;mermaid.min.js</span><br><span class=\"line\">  #cdn: &#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mermaid&#x2F;8.0.0&#x2F;mermaid.min.js</span><br></pre></td></tr></table></figure>\n具体请参考 <a href=\"https://rogersnowing.cn/post/38b5106c.html\" target=\"_blank\" rel=\"noopener\">https://rogersnowing.cn/post/38b5106c.html</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><ol>\n<li>当博客域名是子URL时，例如<a href=\"https://xxx.github.io/blog，则修改站点配置文件如下：\" target=\"_blank\" rel=\"noopener\">https://xxx.github.io/blog，则修改站点配置文件如下：</a><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://gaocher.github.io/blog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/blog/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"><span class=\"attr\">pretty_urls:</span></span><br><span class=\"line\">  <span class=\"attr\">trailing_index:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class=\"line\">  <span class=\"attr\">trailing_html:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h2><p><a href=\"https://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html\" target=\"_blank\" rel=\"noopener\">https://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html</a><br><a href=\"https://github.com/EZLippi/hexo-theme\" target=\"_blank\" rel=\"noopener\">https://github.com/EZLippi/hexo-theme</a></p>\n","site":{"data":{}},"length":1221,"excerpt":"","more":"<h2 id=\"主要链接\"><a href=\"#主要链接\" class=\"headerlink\" title=\"主要链接\"></a>主要链接</h2><ol>\n<li>Hexo安装 <a href=\"https://hexo.io/docs/setup\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/setup</a></li>\n<li>Hexo发布到GitHub <a href=\"https://hexo.io/docs/github-pages\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/github-pages</a></li>\n<li>Next主题安装 <a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">https://github.com/theme-next/hexo-theme-next</a></li>\n<li>Next主题使用教程 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/</a></li>\n</ol>\n<h2 id=\"添加插件\"><a href=\"#添加插件\" class=\"headerlink\" title=\"添加插件\"></a>添加插件</h2><ol>\n<li>站长工具 cnzz<br>目前v7.6.0版本安装cnzz特别简单，只需要将创建的cnzz的id写入_config.yml里cnzz_siteid即可，无需添加其他任何文件。<br>如何申请友盟，请参考<a href=\"https://www.jianshu.com/p/3025b0e221bf\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/3025b0e221bf</a></li>\n<li>添加mermaid画图<ul>\n<li>npm install hexo-filter-mermaid-diagrams –save</li>\n<li>修改themes/next下的_config.yml:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Mermaid tag</span><br><span class=\"line\">mermaid:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  # Available themes: default | dark | forest | neutral</span><br><span class=\"line\">  theme: forest</span><br><span class=\"line\">  cdn: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;mermaid@8&#x2F;dist&#x2F;mermaid.min.js</span><br><span class=\"line\">  #cdn: &#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mermaid&#x2F;8.0.0&#x2F;mermaid.min.js</span><br></pre></td></tr></table></figure>\n具体请参考 <a href=\"https://rogersnowing.cn/post/38b5106c.html\" target=\"_blank\" rel=\"noopener\">https://rogersnowing.cn/post/38b5106c.html</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><ol>\n<li>当博客域名是子URL时，例如<a href=\"https://xxx.github.io/blog，则修改站点配置文件如下：\" target=\"_blank\" rel=\"noopener\">https://xxx.github.io/blog，则修改站点配置文件如下：</a><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://gaocher.github.io/blog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/blog/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"><span class=\"attr\">pretty_urls:</span></span><br><span class=\"line\">  <span class=\"attr\">trailing_index:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class=\"line\">  <span class=\"attr\">trailing_html:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h2><p><a href=\"https://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html\" target=\"_blank\" rel=\"noopener\">https://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html</a><br><a href=\"https://github.com/EZLippi/hexo-theme\" target=\"_blank\" rel=\"noopener\">https://github.com/EZLippi/hexo-theme</a></p>\n"},{"title":"Mono/FluxCreate —— 传统代码转为Reactive的桥梁","date":"2020-01-05T13:32:13.000Z","_content":"`Project Reactor`提供了很多创建Mono/Flux的静态方法，而最常用的就是Mono#create方法，通过该方法能把以前命令式的程序转化为Reactive的编程方式。\n众所周知，Reactive Programming是一种Pull-Push模型，其中Pull用于实现back-pressure，push则是常见的推模型，也是reactive programming的重点（这里不再深入讲解pull/push模型两者的区别）。下面以一个常见的Pull模型迭代器Iterator来说明如何将传统代码转为Reactive的代码。\n\n# Iterator -> Flux\n```java\n//创建一个迭代器\nIterator it = Arrays.asList<>(1,2,3).iterator();\n\n//使用迭代器\nwhile(it.hasNext()) {\n    //模拟业务逻辑 —— 这里直接打印value\n    System.out.println(it.next());\n}\n```\n上面是一个常见的迭代器使用方式，下面看看是如何将迭代器转换成Flux的:\n```java\n//创建迭代器\nIterator it = Arrays.asList<>(1,2,3).iterator();\n\nFlux<Integer> iteratorFlux = Flux.create(sink -> {\n    while (it.hasNext()) {\n        sink.next(it.next()); //利用FluxSink实现data的Push\n    }\n    sink.complete();  //发送结束的Signal\n});\n\n//进行订阅，进行业务逻辑操作\niteratorFlux.subscribe(System.out::println);\n```\n\n# MonoCreate常见的两者使用方式\n传统命令式编程除了Iterator的Pull模式外，通常还有Observable以及Callback这两种Push模式，下面分别举例讲讲这两种模式。\n\n## Observable -> MonoCreate\nObservable原始代码举例：\n```java\nObservable observable = new Observable() {\n    //需要重写Observable，默认是setChanged与notifyObservers分离，实现先提交再通知的效果\n    //这里为了简单起见，将通知与提交放在了一起\n    @Override\n    public void notifyObservers(Object arg) {\n    setChanged();\n    super.notifyObservers(arg);\n    }\n};\nObserver first = (ob,value) -> {\n    System.out.println(\"value is \" + value);\n};\nobservable.addObserver(first);\nobservable.notifyObservers(\"42\");\n\n//    after some time, cancel observer to dispose resource\nobservable.deleteObserver(first);\n```\nMonoCreate的转化示例：\n```java\nMono<Object> observableMono = Mono.create(sink -> {\n    Observer first = (ob, value) -> {\n        sink.success(value);\n    };\n    observable.addObserver(first);\n    observable.notifyObservers(\"42\");\n    sink.onDispose(() -> observable.deleteObserver(first));\n});\nobservableMono.subscribe(v -> System.out.println(\"value is \" + v));\n```\n\n## Callback -> MonoCreate\n```java\n//callback example\nFutureCallback<HttpResponse> callback = new FutureCallback<HttpResponse>() {\n    @Override\n    public void completed(HttpResponse result) {\n        System.out.println(\"Response: \" + result.getStatusLine());\n    }\n\n    @Override\n    public void failed(Exception ex) {\n        System.out.println(\"Fail in \" + ex);\n    }\n\n    @Override\n    public void cancelled() {\n        System.out.println(\"Cancelled\");\n    }\n};\n\nCloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();\nhttpclient.start();\n\nHttpGet request = new HttpGet(\"http://www.example.com/\");\nhttpclient.execute(request, callback);\n```\nMonoCreate的转化示例：\n```java\nCloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();\nhttpclient.start();\n\nMono<HttpResponse> responseMono = Mono.create(monoSink -> {\n    //创建response callback的处理类，并传入monoSink供使用\n    CallbackHandler callbackHandler = new CallbackHandler(monoSink);\n    HttpGet getRequest = new HttpGet(\"http://www.example.com/\");\n    httpclient.execute(getRequest, callbackHandler.getResponseCallback());\n});\nresponseMono.subscribe(response -> System.out.println(\"Response: \" + response.getStatusLine()));\n\n@Data\nstatic class CallbackHandler {\n    private MonoSink monoSink;\n    private FutureCallback<HttpResponse> responseCallback;\n\n    public CallbackHandler(MonoSink monoSink) {\n        this.monoSink = monoSink;\n        responseCallback = new FutureCallback<HttpResponse>() {\n            @Override\n            public void completed(HttpResponse result) {\n                monoSink.success(result);\n            }\n\n            @Override\n            public void failed(Exception ex) {\n                monoSink.error(ex);\n            }\n\n            @Override\n            public void cancelled() {\n                monoSink.onDispose(() -> System.out.println(\"cancelled\"));\n            }\n        };\n    }\n}\n\n```\n# MonoSink\n从前面已经可以看到，将传统代码转变为Reactive方式的关键是在于sink，在创建Mono/FluxCreate的时候，Mono/Flux都会提供相应的sink给使用方来使用。MonoSink相比FluxSink要简单的多，为了简单起见，我们先从MonoSink来了解sink的运行原理（FluxSink会专门另开一篇来说明）。下面就来探探Mono下的MonoSink究竟到底是什么。\n\n再深入MonoSink之前，我们先来看看MonoCreate是怎么使用MonoSink的，对于Reactor来说，所有的入口都是`subscribe`方法，所以先来看看MonoCreate的subscribe方法：\n```java\npublic void subscribe(CoreSubscriber<? super T> actual) {\n    //1. 创建MonoSink实例，供MonoCreate来使用\n    //如变量名字emitter一样，MonoSink的作用其实就是信号的发射器（signal emitter）\n    DefaultMonoSink<T> emitter = new DefaultMonoSink<>(actual);\n\n    //2. emitter除了是sink外，也实现了subscription，供Subscriber使用\n    //这一步，调用Subscriber的onSubscribe方法，其内部则会调用subscription的request方法 （后续会重点说DefaultMonoSink的request方法）\n    actual.onSubscribe(emitter);\n\n    try {\n        //3. callback就是在Mono.create时候传入的Mono构造器\n        //此步骤即调用Mono构造器函数，并将sink传入\n        callback.accept(emitter);\n    }\n    catch (Throwable ex) {\n        emitter.error(Operators.onOperatorError(ex, actual.currentContext()));\n    }\n}\n```\n从上面的源代码可以看出，整个MonoCreate订阅过程很简单，主要是分为三个步骤：\n1. 创建DefaultMonoSink *(通过这一步可以看出，一个Subscriber是独占一个MonoSink的)*\n2. 实现Subscriber的onSubscribe的方法\n3. 调用Mono#create的构造器函数\n\n以上三个步骤是从整体视角来看的，我们再进一步进入DefaultMonoSink，以它的内部视角，来看看到底作为signal emitter的MonoSink做了些什么。\n\n## MonoSink 内部状态\nMonoSink内部主要有4个状态:\n```java\nvolatile int state; //初始默认状态0，即未调用Request且未赋值\n\nstatic final int NO_REQUEST_HAS_VALUE  = 1; //未调用Request但已经赋值\nstatic final int HAS_REQUEST_NO_VALUE  = 2; //调用了Request但还未赋值\nstatic final int HAS_REQUEST_HAS_VALUE = 3; //调用了Request且已经赋值了\n```\n这三个状态主要取决于request和success(或者error)的调用时机，调用了request方法则会是`HAS_REQUEST`，调用了success(或者error)方法则会是`HAS_VALUE`，其中request方法调用是由Subscriber#onSubscribe调用的，success或者error则是由具体使用者来调用的，如Callback。由于success或者error调用时机往往不可能确定（通常是异步的），所以才产生了上述4种状态。\n\n以同步的角度思考，通常是先调用request然后再调用success或者error方法，其中success会对应调用Subscriber的onNext与onComplete方法，error方法则会调用对应的Subscriber#onError方法。但事情往往没这么简单，就如前面提到的，request方法与success/error方法是乱序的，很有可能在request的时候，success/error方法已经调用结束了。为了解决这个问题，每个方法都引入了for-loop加CAS的多线程操作，变得相对复杂了，但只要知道其内部原理，再复杂的代码看起来就都有线索了，下面以request方法为例，来讲讲是MonoSink是如何解决多线程问题的。\n\n## MonoSink request方法解释\n```java\npublic void request(long n) {\n    if (Operators.validate(n)) {\n        LongConsumer consumer = requestConsumer;\n        //1. 如果传入了requestConsumer，则调用\n        //requestConsumer是通过onRequest方法传入的\n        if (consumer != null) {\n            consumer.accept(n);\n        }\n        //2. 进入for loop来实现自旋\n        for (; ; ) {\n            int s = state;\n            //2.1 HAS_Request: 已经调用过了，直接退出\n            if (s == HAS_REQUEST_NO_VALUE || s == HAS_REQUEST_HAS_VALUE) {\n                return;\n            }\n            if (s == NO_REQUEST_HAS_VALUE) {\n                // 2.2 double check 是否已经有值\n                // 如果是，执行onNext/onComplete方法，并设置完成状态: HAS_REQUEST_HAS_VALUE\n                // 如果不是，double check失败，直接退出，说明有别的线程已经执行了该方法了\n                if (STATE.compareAndSet(this, s, HAS_REQUEST_HAS_VALUE)) {\n                    try {\n                        actual.onNext(value);\n                        actual.onComplete();\n                    }\n                    finally {\n                        //释放资源 - 具体调用的disposable对象由onDisposable方法赋值\n                        disposeResource(false);\n                    }\n                }\n                return;\n            }\n            //2.3 正常流程，值没有被赋值，设置为HAS_REQUEST_NO_VALUE\n            if (STATE.compareAndSet(this, s, HAS_REQUEST_NO_VALUE)) {\n                return;\n            }\n        }\n    }\n}\n```\n\n## MonoSink回调方法\nMonoSink除了request、success、error方法外，还提供了几个回调函数，以供使用者使用，主要有：\n```java\n//request的时候会被调用，获取request的数量N\nMonoSink<T> onRequest(LongConsumer consumer);\n\n//Subscriber调用subscription.cancel是会调用该Disposable方法\nMonoSink<T> onCancel(Disposable d);\n\n//与onCancel类似，区别是，除了onCancel方法，在onComplete以及onError也会调用该Disposable方法\nMonoSink<T> onDispose(Disposable d);\n```\n这里简单讲一下Reactor的代码命名规范，对于回调函数都是以onXXX方式命名，注意调用该onXXX方式的时候，**并不是直接调用，而只是传入该回调方法，待对应的事件信号发生时，才会真的被调用**。这也是声明式编程的一个特色，先声明再执行。\n\n# 总结\n本文首先描述了传统命令式的代码如何转换为Reactive方式的代码，然后就其内部MonoSink就行了深入的了解，重点讲解了其实现形式，通过对MonoSink的剖析，能够更具体的对Mono整体的使用方式的了解。","source":"_posts/mono-create.md","raw":"---\ntitle: Mono/FluxCreate —— 传统代码转为Reactive的桥梁\ndate: 2020-01-05 21:32:13\ntags:\ncategory: \n    - Project Reactor\n---\n`Project Reactor`提供了很多创建Mono/Flux的静态方法，而最常用的就是Mono#create方法，通过该方法能把以前命令式的程序转化为Reactive的编程方式。\n众所周知，Reactive Programming是一种Pull-Push模型，其中Pull用于实现back-pressure，push则是常见的推模型，也是reactive programming的重点（这里不再深入讲解pull/push模型两者的区别）。下面以一个常见的Pull模型迭代器Iterator来说明如何将传统代码转为Reactive的代码。\n\n# Iterator -> Flux\n```java\n//创建一个迭代器\nIterator it = Arrays.asList<>(1,2,3).iterator();\n\n//使用迭代器\nwhile(it.hasNext()) {\n    //模拟业务逻辑 —— 这里直接打印value\n    System.out.println(it.next());\n}\n```\n上面是一个常见的迭代器使用方式，下面看看是如何将迭代器转换成Flux的:\n```java\n//创建迭代器\nIterator it = Arrays.asList<>(1,2,3).iterator();\n\nFlux<Integer> iteratorFlux = Flux.create(sink -> {\n    while (it.hasNext()) {\n        sink.next(it.next()); //利用FluxSink实现data的Push\n    }\n    sink.complete();  //发送结束的Signal\n});\n\n//进行订阅，进行业务逻辑操作\niteratorFlux.subscribe(System.out::println);\n```\n\n# MonoCreate常见的两者使用方式\n传统命令式编程除了Iterator的Pull模式外，通常还有Observable以及Callback这两种Push模式，下面分别举例讲讲这两种模式。\n\n## Observable -> MonoCreate\nObservable原始代码举例：\n```java\nObservable observable = new Observable() {\n    //需要重写Observable，默认是setChanged与notifyObservers分离，实现先提交再通知的效果\n    //这里为了简单起见，将通知与提交放在了一起\n    @Override\n    public void notifyObservers(Object arg) {\n    setChanged();\n    super.notifyObservers(arg);\n    }\n};\nObserver first = (ob,value) -> {\n    System.out.println(\"value is \" + value);\n};\nobservable.addObserver(first);\nobservable.notifyObservers(\"42\");\n\n//    after some time, cancel observer to dispose resource\nobservable.deleteObserver(first);\n```\nMonoCreate的转化示例：\n```java\nMono<Object> observableMono = Mono.create(sink -> {\n    Observer first = (ob, value) -> {\n        sink.success(value);\n    };\n    observable.addObserver(first);\n    observable.notifyObservers(\"42\");\n    sink.onDispose(() -> observable.deleteObserver(first));\n});\nobservableMono.subscribe(v -> System.out.println(\"value is \" + v));\n```\n\n## Callback -> MonoCreate\n```java\n//callback example\nFutureCallback<HttpResponse> callback = new FutureCallback<HttpResponse>() {\n    @Override\n    public void completed(HttpResponse result) {\n        System.out.println(\"Response: \" + result.getStatusLine());\n    }\n\n    @Override\n    public void failed(Exception ex) {\n        System.out.println(\"Fail in \" + ex);\n    }\n\n    @Override\n    public void cancelled() {\n        System.out.println(\"Cancelled\");\n    }\n};\n\nCloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();\nhttpclient.start();\n\nHttpGet request = new HttpGet(\"http://www.example.com/\");\nhttpclient.execute(request, callback);\n```\nMonoCreate的转化示例：\n```java\nCloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();\nhttpclient.start();\n\nMono<HttpResponse> responseMono = Mono.create(monoSink -> {\n    //创建response callback的处理类，并传入monoSink供使用\n    CallbackHandler callbackHandler = new CallbackHandler(monoSink);\n    HttpGet getRequest = new HttpGet(\"http://www.example.com/\");\n    httpclient.execute(getRequest, callbackHandler.getResponseCallback());\n});\nresponseMono.subscribe(response -> System.out.println(\"Response: \" + response.getStatusLine()));\n\n@Data\nstatic class CallbackHandler {\n    private MonoSink monoSink;\n    private FutureCallback<HttpResponse> responseCallback;\n\n    public CallbackHandler(MonoSink monoSink) {\n        this.monoSink = monoSink;\n        responseCallback = new FutureCallback<HttpResponse>() {\n            @Override\n            public void completed(HttpResponse result) {\n                monoSink.success(result);\n            }\n\n            @Override\n            public void failed(Exception ex) {\n                monoSink.error(ex);\n            }\n\n            @Override\n            public void cancelled() {\n                monoSink.onDispose(() -> System.out.println(\"cancelled\"));\n            }\n        };\n    }\n}\n\n```\n# MonoSink\n从前面已经可以看到，将传统代码转变为Reactive方式的关键是在于sink，在创建Mono/FluxCreate的时候，Mono/Flux都会提供相应的sink给使用方来使用。MonoSink相比FluxSink要简单的多，为了简单起见，我们先从MonoSink来了解sink的运行原理（FluxSink会专门另开一篇来说明）。下面就来探探Mono下的MonoSink究竟到底是什么。\n\n再深入MonoSink之前，我们先来看看MonoCreate是怎么使用MonoSink的，对于Reactor来说，所有的入口都是`subscribe`方法，所以先来看看MonoCreate的subscribe方法：\n```java\npublic void subscribe(CoreSubscriber<? super T> actual) {\n    //1. 创建MonoSink实例，供MonoCreate来使用\n    //如变量名字emitter一样，MonoSink的作用其实就是信号的发射器（signal emitter）\n    DefaultMonoSink<T> emitter = new DefaultMonoSink<>(actual);\n\n    //2. emitter除了是sink外，也实现了subscription，供Subscriber使用\n    //这一步，调用Subscriber的onSubscribe方法，其内部则会调用subscription的request方法 （后续会重点说DefaultMonoSink的request方法）\n    actual.onSubscribe(emitter);\n\n    try {\n        //3. callback就是在Mono.create时候传入的Mono构造器\n        //此步骤即调用Mono构造器函数，并将sink传入\n        callback.accept(emitter);\n    }\n    catch (Throwable ex) {\n        emitter.error(Operators.onOperatorError(ex, actual.currentContext()));\n    }\n}\n```\n从上面的源代码可以看出，整个MonoCreate订阅过程很简单，主要是分为三个步骤：\n1. 创建DefaultMonoSink *(通过这一步可以看出，一个Subscriber是独占一个MonoSink的)*\n2. 实现Subscriber的onSubscribe的方法\n3. 调用Mono#create的构造器函数\n\n以上三个步骤是从整体视角来看的，我们再进一步进入DefaultMonoSink，以它的内部视角，来看看到底作为signal emitter的MonoSink做了些什么。\n\n## MonoSink 内部状态\nMonoSink内部主要有4个状态:\n```java\nvolatile int state; //初始默认状态0，即未调用Request且未赋值\n\nstatic final int NO_REQUEST_HAS_VALUE  = 1; //未调用Request但已经赋值\nstatic final int HAS_REQUEST_NO_VALUE  = 2; //调用了Request但还未赋值\nstatic final int HAS_REQUEST_HAS_VALUE = 3; //调用了Request且已经赋值了\n```\n这三个状态主要取决于request和success(或者error)的调用时机，调用了request方法则会是`HAS_REQUEST`，调用了success(或者error)方法则会是`HAS_VALUE`，其中request方法调用是由Subscriber#onSubscribe调用的，success或者error则是由具体使用者来调用的，如Callback。由于success或者error调用时机往往不可能确定（通常是异步的），所以才产生了上述4种状态。\n\n以同步的角度思考，通常是先调用request然后再调用success或者error方法，其中success会对应调用Subscriber的onNext与onComplete方法，error方法则会调用对应的Subscriber#onError方法。但事情往往没这么简单，就如前面提到的，request方法与success/error方法是乱序的，很有可能在request的时候，success/error方法已经调用结束了。为了解决这个问题，每个方法都引入了for-loop加CAS的多线程操作，变得相对复杂了，但只要知道其内部原理，再复杂的代码看起来就都有线索了，下面以request方法为例，来讲讲是MonoSink是如何解决多线程问题的。\n\n## MonoSink request方法解释\n```java\npublic void request(long n) {\n    if (Operators.validate(n)) {\n        LongConsumer consumer = requestConsumer;\n        //1. 如果传入了requestConsumer，则调用\n        //requestConsumer是通过onRequest方法传入的\n        if (consumer != null) {\n            consumer.accept(n);\n        }\n        //2. 进入for loop来实现自旋\n        for (; ; ) {\n            int s = state;\n            //2.1 HAS_Request: 已经调用过了，直接退出\n            if (s == HAS_REQUEST_NO_VALUE || s == HAS_REQUEST_HAS_VALUE) {\n                return;\n            }\n            if (s == NO_REQUEST_HAS_VALUE) {\n                // 2.2 double check 是否已经有值\n                // 如果是，执行onNext/onComplete方法，并设置完成状态: HAS_REQUEST_HAS_VALUE\n                // 如果不是，double check失败，直接退出，说明有别的线程已经执行了该方法了\n                if (STATE.compareAndSet(this, s, HAS_REQUEST_HAS_VALUE)) {\n                    try {\n                        actual.onNext(value);\n                        actual.onComplete();\n                    }\n                    finally {\n                        //释放资源 - 具体调用的disposable对象由onDisposable方法赋值\n                        disposeResource(false);\n                    }\n                }\n                return;\n            }\n            //2.3 正常流程，值没有被赋值，设置为HAS_REQUEST_NO_VALUE\n            if (STATE.compareAndSet(this, s, HAS_REQUEST_NO_VALUE)) {\n                return;\n            }\n        }\n    }\n}\n```\n\n## MonoSink回调方法\nMonoSink除了request、success、error方法外，还提供了几个回调函数，以供使用者使用，主要有：\n```java\n//request的时候会被调用，获取request的数量N\nMonoSink<T> onRequest(LongConsumer consumer);\n\n//Subscriber调用subscription.cancel是会调用该Disposable方法\nMonoSink<T> onCancel(Disposable d);\n\n//与onCancel类似，区别是，除了onCancel方法，在onComplete以及onError也会调用该Disposable方法\nMonoSink<T> onDispose(Disposable d);\n```\n这里简单讲一下Reactor的代码命名规范，对于回调函数都是以onXXX方式命名，注意调用该onXXX方式的时候，**并不是直接调用，而只是传入该回调方法，待对应的事件信号发生时，才会真的被调用**。这也是声明式编程的一个特色，先声明再执行。\n\n# 总结\n本文首先描述了传统命令式的代码如何转换为Reactive方式的代码，然后就其内部MonoSink就行了深入的了解，重点讲解了其实现形式，通过对MonoSink的剖析，能够更具体的对Mono整体的使用方式的了解。","slug":"mono-create","published":1,"updated":"2020-01-06T09:24:20.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88lj6q50000yz7a9ar48xil","content":"<p><code>Project Reactor</code>提供了很多创建Mono/Flux的静态方法，而最常用的就是Mono#create方法，通过该方法能把以前命令式的程序转化为Reactive的编程方式。<br>众所周知，Reactive Programming是一种Pull-Push模型，其中Pull用于实现back-pressure，push则是常见的推模型，也是reactive programming的重点（这里不再深入讲解pull/push模型两者的区别）。下面以一个常见的Pull模型迭代器Iterator来说明如何将传统代码转为Reactive的代码。</p>\n<h1 id=\"Iterator-gt-Flux\"><a href=\"#Iterator-gt-Flux\" class=\"headerlink\" title=\"Iterator -&gt; Flux\"></a>Iterator -&gt; Flux</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个迭代器</span></span><br><span class=\"line\">Iterator it = Arrays.asList&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).iterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(it.hasNext()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//模拟业务逻辑 —— 这里直接打印value</span></span><br><span class=\"line\">    System.out.println(it.next());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是一个常见的迭代器使用方式，下面看看是如何将迭代器转换成Flux的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建迭代器</span></span><br><span class=\"line\">Iterator it = Arrays.asList&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">Flux&lt;Integer&gt; iteratorFlux = Flux.create(sink -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">        sink.next(it.next()); <span class=\"comment\">//利用FluxSink实现data的Push</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sink.complete();  <span class=\"comment\">//发送结束的Signal</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进行订阅，进行业务逻辑操作</span></span><br><span class=\"line\">iteratorFlux.subscribe(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MonoCreate常见的两者使用方式\"><a href=\"#MonoCreate常见的两者使用方式\" class=\"headerlink\" title=\"MonoCreate常见的两者使用方式\"></a>MonoCreate常见的两者使用方式</h1><p>传统命令式编程除了Iterator的Pull模式外，通常还有Observable以及Callback这两种Push模式，下面分别举例讲讲这两种模式。</p>\n<h2 id=\"Observable-gt-MonoCreate\"><a href=\"#Observable-gt-MonoCreate\" class=\"headerlink\" title=\"Observable -&gt; MonoCreate\"></a>Observable -&gt; MonoCreate</h2><p>Observable原始代码举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable observable = <span class=\"keyword\">new</span> Observable() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要重写Observable，默认是setChanged与notifyObservers分离，实现先提交再通知的效果</span></span><br><span class=\"line\">    <span class=\"comment\">//这里为了简单起见，将通知与提交放在了一起</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Object arg)</span> </span>&#123;</span><br><span class=\"line\">    setChanged();</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.notifyObservers(arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Observer first = (ob,value) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"value is \"</span> + value);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">observable.addObserver(first);</span><br><span class=\"line\">observable.notifyObservers(<span class=\"string\">\"42\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    after some time, cancel observer to dispose resource</span></span><br><span class=\"line\">observable.deleteObserver(first);</span><br></pre></td></tr></table></figure>\n<p>MonoCreate的转化示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mono&lt;Object&gt; observableMono = Mono.create(sink -&gt; &#123;</span><br><span class=\"line\">    Observer first = (ob, value) -&gt; &#123;</span><br><span class=\"line\">        sink.success(value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    observable.addObserver(first);</span><br><span class=\"line\">    observable.notifyObservers(<span class=\"string\">\"42\"</span>);</span><br><span class=\"line\">    sink.onDispose(() -&gt; observable.deleteObserver(first));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">observableMono.subscribe(v -&gt; System.out.println(<span class=\"string\">\"value is \"</span> + v));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Callback-gt-MonoCreate\"><a href=\"#Callback-gt-MonoCreate\" class=\"headerlink\" title=\"Callback -&gt; MonoCreate\"></a>Callback -&gt; MonoCreate</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//callback example</span></span><br><span class=\"line\">FutureCallback&lt;HttpResponse&gt; callback = <span class=\"keyword\">new</span> FutureCallback&lt;HttpResponse&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(HttpResponse result)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Response: \"</span> + result.getStatusLine());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Exception ex)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Fail in \"</span> + ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cancelled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Cancelled\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();</span><br><span class=\"line\">httpclient.start();</span><br><span class=\"line\"></span><br><span class=\"line\">HttpGet request = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"http://www.example.com/\"</span>);</span><br><span class=\"line\">httpclient.execute(request, callback);</span><br></pre></td></tr></table></figure>\n<p>MonoCreate的转化示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();</span><br><span class=\"line\">httpclient.start();</span><br><span class=\"line\"></span><br><span class=\"line\">Mono&lt;HttpResponse&gt; responseMono = Mono.create(monoSink -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建response callback的处理类，并传入monoSink供使用</span></span><br><span class=\"line\">    CallbackHandler callbackHandler = <span class=\"keyword\">new</span> CallbackHandler(monoSink);</span><br><span class=\"line\">    HttpGet getRequest = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"http://www.example.com/\"</span>);</span><br><span class=\"line\">    httpclient.execute(getRequest, callbackHandler.getResponseCallback());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">responseMono.subscribe(response -&gt; System.out.println(<span class=\"string\">\"Response: \"</span> + response.getStatusLine()));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallbackHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MonoSink monoSink;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FutureCallback&lt;HttpResponse&gt; responseCallback;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CallbackHandler</span><span class=\"params\">(MonoSink monoSink)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.monoSink = monoSink;</span><br><span class=\"line\">        responseCallback = <span class=\"keyword\">new</span> FutureCallback&lt;HttpResponse&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(HttpResponse result)</span> </span>&#123;</span><br><span class=\"line\">                monoSink.success(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Exception ex)</span> </span>&#123;</span><br><span class=\"line\">                monoSink.error(ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cancelled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                monoSink.onDispose(() -&gt; System.out.println(<span class=\"string\">\"cancelled\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"MonoSink\"><a href=\"#MonoSink\" class=\"headerlink\" title=\"MonoSink\"></a>MonoSink</h1><p>从前面已经可以看到，将传统代码转变为Reactive方式的关键是在于sink，在创建Mono/FluxCreate的时候，Mono/Flux都会提供相应的sink给使用方来使用。MonoSink相比FluxSink要简单的多，为了简单起见，我们先从MonoSink来了解sink的运行原理（FluxSink会专门另开一篇来说明）。下面就来探探Mono下的MonoSink究竟到底是什么。</p>\n<p>再深入MonoSink之前，我们先来看看MonoCreate是怎么使用MonoSink的，对于Reactor来说，所有的入口都是<code>subscribe</code>方法，所以先来看看MonoCreate的subscribe方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(CoreSubscriber&lt;? <span class=\"keyword\">super</span> T&gt; actual)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 创建MonoSink实例，供MonoCreate来使用</span></span><br><span class=\"line\">    <span class=\"comment\">//如变量名字emitter一样，MonoSink的作用其实就是信号的发射器（signal emitter）</span></span><br><span class=\"line\">    DefaultMonoSink&lt;T&gt; emitter = <span class=\"keyword\">new</span> DefaultMonoSink&lt;&gt;(actual);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. emitter除了是sink外，也实现了subscription，供Subscriber使用</span></span><br><span class=\"line\">    <span class=\"comment\">//这一步，调用Subscriber的onSubscribe方法，其内部则会调用subscription的request方法 （后续会重点说DefaultMonoSink的request方法）</span></span><br><span class=\"line\">    actual.onSubscribe(emitter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//3. callback就是在Mono.create时候传入的Mono构造器</span></span><br><span class=\"line\">        <span class=\"comment\">//此步骤即调用Mono构造器函数，并将sink传入</span></span><br><span class=\"line\">        callback.accept(emitter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        emitter.error(Operators.onOperatorError(ex, actual.currentContext()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的源代码可以看出，整个MonoCreate订阅过程很简单，主要是分为三个步骤：</p>\n<ol>\n<li>创建DefaultMonoSink <em>(通过这一步可以看出，一个Subscriber是独占一个MonoSink的)</em></li>\n<li>实现Subscriber的onSubscribe的方法</li>\n<li>调用Mono#create的构造器函数</li>\n</ol>\n<p>以上三个步骤是从整体视角来看的，我们再进一步进入DefaultMonoSink，以它的内部视角，来看看到底作为signal emitter的MonoSink做了些什么。</p>\n<h2 id=\"MonoSink-内部状态\"><a href=\"#MonoSink-内部状态\" class=\"headerlink\" title=\"MonoSink 内部状态\"></a>MonoSink 内部状态</h2><p>MonoSink内部主要有4个状态:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state; <span class=\"comment\">//初始默认状态0，即未调用Request且未赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NO_REQUEST_HAS_VALUE  = <span class=\"number\">1</span>; <span class=\"comment\">//未调用Request但已经赋值</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HAS_REQUEST_NO_VALUE  = <span class=\"number\">2</span>; <span class=\"comment\">//调用了Request但还未赋值</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HAS_REQUEST_HAS_VALUE = <span class=\"number\">3</span>; <span class=\"comment\">//调用了Request且已经赋值了</span></span><br></pre></td></tr></table></figure>\n<p>这三个状态主要取决于request和success(或者error)的调用时机，调用了request方法则会是<code>HAS_REQUEST</code>，调用了success(或者error)方法则会是<code>HAS_VALUE</code>，其中request方法调用是由Subscriber#onSubscribe调用的，success或者error则是由具体使用者来调用的，如Callback。由于success或者error调用时机往往不可能确定（通常是异步的），所以才产生了上述4种状态。</p>\n<p>以同步的角度思考，通常是先调用request然后再调用success或者error方法，其中success会对应调用Subscriber的onNext与onComplete方法，error方法则会调用对应的Subscriber#onError方法。但事情往往没这么简单，就如前面提到的，request方法与success/error方法是乱序的，很有可能在request的时候，success/error方法已经调用结束了。为了解决这个问题，每个方法都引入了for-loop加CAS的多线程操作，变得相对复杂了，但只要知道其内部原理，再复杂的代码看起来就都有线索了，下面以request方法为例，来讲讲是MonoSink是如何解决多线程问题的。</p>\n<h2 id=\"MonoSink-request方法解释\"><a href=\"#MonoSink-request方法解释\" class=\"headerlink\" title=\"MonoSink request方法解释\"></a>MonoSink request方法解释</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Operators.validate(n)) &#123;</span><br><span class=\"line\">        LongConsumer consumer = requestConsumer;</span><br><span class=\"line\">        <span class=\"comment\">//1. 如果传入了requestConsumer，则调用</span></span><br><span class=\"line\">        <span class=\"comment\">//requestConsumer是通过onRequest方法传入的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (consumer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            consumer.accept(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//2. 进入for loop来实现自旋</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">            <span class=\"comment\">//2.1 HAS_Request: 已经调用过了，直接退出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s == HAS_REQUEST_NO_VALUE || s == HAS_REQUEST_HAS_VALUE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s == NO_REQUEST_HAS_VALUE) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2.2 double check 是否已经有值</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果是，执行onNext/onComplete方法，并设置完成状态: HAS_REQUEST_HAS_VALUE</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果不是，double check失败，直接退出，说明有别的线程已经执行了该方法了</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (STATE.compareAndSet(<span class=\"keyword\">this</span>, s, HAS_REQUEST_HAS_VALUE)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        actual.onNext(value);</span><br><span class=\"line\">                        actual.onComplete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//释放资源 - 具体调用的disposable对象由onDisposable方法赋值</span></span><br><span class=\"line\">                        disposeResource(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//2.3 正常流程，值没有被赋值，设置为HAS_REQUEST_NO_VALUE</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (STATE.compareAndSet(<span class=\"keyword\">this</span>, s, HAS_REQUEST_NO_VALUE)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MonoSink回调方法\"><a href=\"#MonoSink回调方法\" class=\"headerlink\" title=\"MonoSink回调方法\"></a>MonoSink回调方法</h2><p>MonoSink除了request、success、error方法外，还提供了几个回调函数，以供使用者使用，主要有：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//request的时候会被调用，获取request的数量N</span></span><br><span class=\"line\"><span class=\"function\">MonoSink&lt;T&gt; <span class=\"title\">onRequest</span><span class=\"params\">(LongConsumer consumer)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Subscriber调用subscription.cancel是会调用该Disposable方法</span></span><br><span class=\"line\"><span class=\"function\">MonoSink&lt;T&gt; <span class=\"title\">onCancel</span><span class=\"params\">(Disposable d)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//与onCancel类似，区别是，除了onCancel方法，在onComplete以及onError也会调用该Disposable方法</span></span><br><span class=\"line\"><span class=\"function\">MonoSink&lt;T&gt; <span class=\"title\">onDispose</span><span class=\"params\">(Disposable d)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>这里简单讲一下Reactor的代码命名规范，对于回调函数都是以onXXX方式命名，注意调用该onXXX方式的时候，<strong>并不是直接调用，而只是传入该回调方法，待对应的事件信号发生时，才会真的被调用</strong>。这也是声明式编程的一个特色，先声明再执行。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文首先描述了传统命令式的代码如何转换为Reactive方式的代码，然后就其内部MonoSink就行了深入的了解，重点讲解了其实现形式，通过对MonoSink的剖析，能够更具体的对Mono整体的使用方式的了解。</p>\n","site":{"data":{}},"length":6888,"excerpt":"","more":"<p><code>Project Reactor</code>提供了很多创建Mono/Flux的静态方法，而最常用的就是Mono#create方法，通过该方法能把以前命令式的程序转化为Reactive的编程方式。<br>众所周知，Reactive Programming是一种Pull-Push模型，其中Pull用于实现back-pressure，push则是常见的推模型，也是reactive programming的重点（这里不再深入讲解pull/push模型两者的区别）。下面以一个常见的Pull模型迭代器Iterator来说明如何将传统代码转为Reactive的代码。</p>\n<h1 id=\"Iterator-gt-Flux\"><a href=\"#Iterator-gt-Flux\" class=\"headerlink\" title=\"Iterator -&gt; Flux\"></a>Iterator -&gt; Flux</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个迭代器</span></span><br><span class=\"line\">Iterator it = Arrays.asList&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).iterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(it.hasNext()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//模拟业务逻辑 —— 这里直接打印value</span></span><br><span class=\"line\">    System.out.println(it.next());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是一个常见的迭代器使用方式，下面看看是如何将迭代器转换成Flux的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建迭代器</span></span><br><span class=\"line\">Iterator it = Arrays.asList&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">Flux&lt;Integer&gt; iteratorFlux = Flux.create(sink -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">        sink.next(it.next()); <span class=\"comment\">//利用FluxSink实现data的Push</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sink.complete();  <span class=\"comment\">//发送结束的Signal</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进行订阅，进行业务逻辑操作</span></span><br><span class=\"line\">iteratorFlux.subscribe(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MonoCreate常见的两者使用方式\"><a href=\"#MonoCreate常见的两者使用方式\" class=\"headerlink\" title=\"MonoCreate常见的两者使用方式\"></a>MonoCreate常见的两者使用方式</h1><p>传统命令式编程除了Iterator的Pull模式外，通常还有Observable以及Callback这两种Push模式，下面分别举例讲讲这两种模式。</p>\n<h2 id=\"Observable-gt-MonoCreate\"><a href=\"#Observable-gt-MonoCreate\" class=\"headerlink\" title=\"Observable -&gt; MonoCreate\"></a>Observable -&gt; MonoCreate</h2><p>Observable原始代码举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable observable = <span class=\"keyword\">new</span> Observable() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要重写Observable，默认是setChanged与notifyObservers分离，实现先提交再通知的效果</span></span><br><span class=\"line\">    <span class=\"comment\">//这里为了简单起见，将通知与提交放在了一起</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Object arg)</span> </span>&#123;</span><br><span class=\"line\">    setChanged();</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.notifyObservers(arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Observer first = (ob,value) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"value is \"</span> + value);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">observable.addObserver(first);</span><br><span class=\"line\">observable.notifyObservers(<span class=\"string\">\"42\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    after some time, cancel observer to dispose resource</span></span><br><span class=\"line\">observable.deleteObserver(first);</span><br></pre></td></tr></table></figure>\n<p>MonoCreate的转化示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mono&lt;Object&gt; observableMono = Mono.create(sink -&gt; &#123;</span><br><span class=\"line\">    Observer first = (ob, value) -&gt; &#123;</span><br><span class=\"line\">        sink.success(value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    observable.addObserver(first);</span><br><span class=\"line\">    observable.notifyObservers(<span class=\"string\">\"42\"</span>);</span><br><span class=\"line\">    sink.onDispose(() -&gt; observable.deleteObserver(first));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">observableMono.subscribe(v -&gt; System.out.println(<span class=\"string\">\"value is \"</span> + v));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Callback-gt-MonoCreate\"><a href=\"#Callback-gt-MonoCreate\" class=\"headerlink\" title=\"Callback -&gt; MonoCreate\"></a>Callback -&gt; MonoCreate</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//callback example</span></span><br><span class=\"line\">FutureCallback&lt;HttpResponse&gt; callback = <span class=\"keyword\">new</span> FutureCallback&lt;HttpResponse&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(HttpResponse result)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Response: \"</span> + result.getStatusLine());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Exception ex)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Fail in \"</span> + ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cancelled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Cancelled\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();</span><br><span class=\"line\">httpclient.start();</span><br><span class=\"line\"></span><br><span class=\"line\">HttpGet request = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"http://www.example.com/\"</span>);</span><br><span class=\"line\">httpclient.execute(request, callback);</span><br></pre></td></tr></table></figure>\n<p>MonoCreate的转化示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();</span><br><span class=\"line\">httpclient.start();</span><br><span class=\"line\"></span><br><span class=\"line\">Mono&lt;HttpResponse&gt; responseMono = Mono.create(monoSink -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建response callback的处理类，并传入monoSink供使用</span></span><br><span class=\"line\">    CallbackHandler callbackHandler = <span class=\"keyword\">new</span> CallbackHandler(monoSink);</span><br><span class=\"line\">    HttpGet getRequest = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"http://www.example.com/\"</span>);</span><br><span class=\"line\">    httpclient.execute(getRequest, callbackHandler.getResponseCallback());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">responseMono.subscribe(response -&gt; System.out.println(<span class=\"string\">\"Response: \"</span> + response.getStatusLine()));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallbackHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MonoSink monoSink;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FutureCallback&lt;HttpResponse&gt; responseCallback;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CallbackHandler</span><span class=\"params\">(MonoSink monoSink)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.monoSink = monoSink;</span><br><span class=\"line\">        responseCallback = <span class=\"keyword\">new</span> FutureCallback&lt;HttpResponse&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(HttpResponse result)</span> </span>&#123;</span><br><span class=\"line\">                monoSink.success(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Exception ex)</span> </span>&#123;</span><br><span class=\"line\">                monoSink.error(ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cancelled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                monoSink.onDispose(() -&gt; System.out.println(<span class=\"string\">\"cancelled\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"MonoSink\"><a href=\"#MonoSink\" class=\"headerlink\" title=\"MonoSink\"></a>MonoSink</h1><p>从前面已经可以看到，将传统代码转变为Reactive方式的关键是在于sink，在创建Mono/FluxCreate的时候，Mono/Flux都会提供相应的sink给使用方来使用。MonoSink相比FluxSink要简单的多，为了简单起见，我们先从MonoSink来了解sink的运行原理（FluxSink会专门另开一篇来说明）。下面就来探探Mono下的MonoSink究竟到底是什么。</p>\n<p>再深入MonoSink之前，我们先来看看MonoCreate是怎么使用MonoSink的，对于Reactor来说，所有的入口都是<code>subscribe</code>方法，所以先来看看MonoCreate的subscribe方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(CoreSubscriber&lt;? <span class=\"keyword\">super</span> T&gt; actual)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 创建MonoSink实例，供MonoCreate来使用</span></span><br><span class=\"line\">    <span class=\"comment\">//如变量名字emitter一样，MonoSink的作用其实就是信号的发射器（signal emitter）</span></span><br><span class=\"line\">    DefaultMonoSink&lt;T&gt; emitter = <span class=\"keyword\">new</span> DefaultMonoSink&lt;&gt;(actual);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. emitter除了是sink外，也实现了subscription，供Subscriber使用</span></span><br><span class=\"line\">    <span class=\"comment\">//这一步，调用Subscriber的onSubscribe方法，其内部则会调用subscription的request方法 （后续会重点说DefaultMonoSink的request方法）</span></span><br><span class=\"line\">    actual.onSubscribe(emitter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//3. callback就是在Mono.create时候传入的Mono构造器</span></span><br><span class=\"line\">        <span class=\"comment\">//此步骤即调用Mono构造器函数，并将sink传入</span></span><br><span class=\"line\">        callback.accept(emitter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        emitter.error(Operators.onOperatorError(ex, actual.currentContext()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的源代码可以看出，整个MonoCreate订阅过程很简单，主要是分为三个步骤：</p>\n<ol>\n<li>创建DefaultMonoSink <em>(通过这一步可以看出，一个Subscriber是独占一个MonoSink的)</em></li>\n<li>实现Subscriber的onSubscribe的方法</li>\n<li>调用Mono#create的构造器函数</li>\n</ol>\n<p>以上三个步骤是从整体视角来看的，我们再进一步进入DefaultMonoSink，以它的内部视角，来看看到底作为signal emitter的MonoSink做了些什么。</p>\n<h2 id=\"MonoSink-内部状态\"><a href=\"#MonoSink-内部状态\" class=\"headerlink\" title=\"MonoSink 内部状态\"></a>MonoSink 内部状态</h2><p>MonoSink内部主要有4个状态:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state; <span class=\"comment\">//初始默认状态0，即未调用Request且未赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NO_REQUEST_HAS_VALUE  = <span class=\"number\">1</span>; <span class=\"comment\">//未调用Request但已经赋值</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HAS_REQUEST_NO_VALUE  = <span class=\"number\">2</span>; <span class=\"comment\">//调用了Request但还未赋值</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HAS_REQUEST_HAS_VALUE = <span class=\"number\">3</span>; <span class=\"comment\">//调用了Request且已经赋值了</span></span><br></pre></td></tr></table></figure>\n<p>这三个状态主要取决于request和success(或者error)的调用时机，调用了request方法则会是<code>HAS_REQUEST</code>，调用了success(或者error)方法则会是<code>HAS_VALUE</code>，其中request方法调用是由Subscriber#onSubscribe调用的，success或者error则是由具体使用者来调用的，如Callback。由于success或者error调用时机往往不可能确定（通常是异步的），所以才产生了上述4种状态。</p>\n<p>以同步的角度思考，通常是先调用request然后再调用success或者error方法，其中success会对应调用Subscriber的onNext与onComplete方法，error方法则会调用对应的Subscriber#onError方法。但事情往往没这么简单，就如前面提到的，request方法与success/error方法是乱序的，很有可能在request的时候，success/error方法已经调用结束了。为了解决这个问题，每个方法都引入了for-loop加CAS的多线程操作，变得相对复杂了，但只要知道其内部原理，再复杂的代码看起来就都有线索了，下面以request方法为例，来讲讲是MonoSink是如何解决多线程问题的。</p>\n<h2 id=\"MonoSink-request方法解释\"><a href=\"#MonoSink-request方法解释\" class=\"headerlink\" title=\"MonoSink request方法解释\"></a>MonoSink request方法解释</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Operators.validate(n)) &#123;</span><br><span class=\"line\">        LongConsumer consumer = requestConsumer;</span><br><span class=\"line\">        <span class=\"comment\">//1. 如果传入了requestConsumer，则调用</span></span><br><span class=\"line\">        <span class=\"comment\">//requestConsumer是通过onRequest方法传入的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (consumer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            consumer.accept(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//2. 进入for loop来实现自旋</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">            <span class=\"comment\">//2.1 HAS_Request: 已经调用过了，直接退出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s == HAS_REQUEST_NO_VALUE || s == HAS_REQUEST_HAS_VALUE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s == NO_REQUEST_HAS_VALUE) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2.2 double check 是否已经有值</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果是，执行onNext/onComplete方法，并设置完成状态: HAS_REQUEST_HAS_VALUE</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果不是，double check失败，直接退出，说明有别的线程已经执行了该方法了</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (STATE.compareAndSet(<span class=\"keyword\">this</span>, s, HAS_REQUEST_HAS_VALUE)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        actual.onNext(value);</span><br><span class=\"line\">                        actual.onComplete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//释放资源 - 具体调用的disposable对象由onDisposable方法赋值</span></span><br><span class=\"line\">                        disposeResource(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//2.3 正常流程，值没有被赋值，设置为HAS_REQUEST_NO_VALUE</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (STATE.compareAndSet(<span class=\"keyword\">this</span>, s, HAS_REQUEST_NO_VALUE)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MonoSink回调方法\"><a href=\"#MonoSink回调方法\" class=\"headerlink\" title=\"MonoSink回调方法\"></a>MonoSink回调方法</h2><p>MonoSink除了request、success、error方法外，还提供了几个回调函数，以供使用者使用，主要有：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//request的时候会被调用，获取request的数量N</span></span><br><span class=\"line\"><span class=\"function\">MonoSink&lt;T&gt; <span class=\"title\">onRequest</span><span class=\"params\">(LongConsumer consumer)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Subscriber调用subscription.cancel是会调用该Disposable方法</span></span><br><span class=\"line\"><span class=\"function\">MonoSink&lt;T&gt; <span class=\"title\">onCancel</span><span class=\"params\">(Disposable d)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//与onCancel类似，区别是，除了onCancel方法，在onComplete以及onError也会调用该Disposable方法</span></span><br><span class=\"line\"><span class=\"function\">MonoSink&lt;T&gt; <span class=\"title\">onDispose</span><span class=\"params\">(Disposable d)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>这里简单讲一下Reactor的代码命名规范，对于回调函数都是以onXXX方式命名，注意调用该onXXX方式的时候，<strong>并不是直接调用，而只是传入该回调方法，待对应的事件信号发生时，才会真的被调用</strong>。这也是声明式编程的一个特色，先声明再执行。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文首先描述了传统命令式的代码如何转换为Reactive方式的代码，然后就其内部MonoSink就行了深入的了解，重点讲解了其实现形式，通过对MonoSink的剖析，能够更具体的对Mono整体的使用方式的了解。</p>\n"}],"PostAsset":[{"_id":"source/_posts/dig-and-dns-record-type/DNS_Query_Flow.png","slug":"DNS_Query_Flow.png","post":"ck4r6b9ro0002317a6mn8eki1","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck4r6b9rh0000317a22esdldx","category_id":"ck4r6b9rq0003317a7g8q4zlo","_id":"ck4r6b9s2000b317ad9348i10"},{"post_id":"ck4r6b9rh0000317a22esdldx","category_id":"ck4r6b9s10009317a333t252a","_id":"ck4r6b9s3000d317a4xqf14uu"},{"post_id":"ck4r6b9ro0002317a6mn8eki1","category_id":"ck4r6b9rq0003317a7g8q4zlo","_id":"ck4r6b9s3000f317a0lstbm2x"},{"post_id":"ck4r6b9ro0002317a6mn8eki1","category_id":"ck4r6b9s2000a317ad1i34ktg","_id":"ck4r6b9s4000g317a90zeby60"},{"post_id":"ck4r6b9rs0004317a15miey5w","category_id":"ck4r6b9rq0003317a7g8q4zlo","_id":"ck4r6b9s4000h317a44r8gw70"},{"post_id":"ck4r6b9rs0004317a15miey5w","category_id":"ck4r6b9s2000a317ad1i34ktg","_id":"ck4r6b9s4000i317a7vgq65o5"},{"post_id":"ck4r6b9ru0005317a6jce4tty","category_id":"ck4r6b9s10008317a5rzt6u65","_id":"ck4r6b9s4000j317a6enk0lq2"},{"post_id":"ck4r6b9ru0005317a6jce4tty","category_id":"ck4r6b9s3000e317ahqkw3bq2","_id":"ck4r6b9s4000k317a18qd0ihd"},{"post_id":"ck88lj6q50000yz7a9ar48xil","category_id":"ck88lj6qa0001yz7agnwcbf2j","_id":"ck88lj6qe0002yz7a1uf23lzf"}],"PostTag":[],"Tag":[]}}